
------------------------------------>
-1, -1, 0, 1
Token: Begin BEGIN A := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <system-goal> 
Semantic (r-l): 0:<system-goal>("", 0)
<------------------------------------


------------------------------------>
0, 1, 1, 3
Token: Begin BEGIN A := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <program> Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)
<------------------------------------


------------------------------------>
1, 3, 3, 6
Token: Begin BEGIN A := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)
<------------------------------------


------------------------------------>
1, 3, 4, 6
Token: Begin A := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)
<------------------------------------


------------------------------------>
4, 6, 6, 8
Token: Begin A := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <scope> <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
6, 8, 8, 11
Token: Begin A := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)
<------------------------------------


------------------------------------>
6, 8, 9, 11
Token: Id := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)
<------------------------------------


------------------------------------>
9, 11, 11, 13
Token: Id := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
11, 13, 13, 17
Token: Id := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("", 0)14:AssignOp("", 0)15:<expr>("", 0)16:Semicolon("", 0)
<------------------------------------


------------------------------------>
13, 17, 17, 18
Token: Id := 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:11:13:13:17:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("", 0)14:AssignOp("", 0)15:<expr>("", 0)16:Semicolon("", 0)17:Id("A", 0)
<------------------------------------

SymbolTable::enter(): hash value=1 symbol: A ...starting new
INSTR: (Declare,	A_2,	Integer)

------------------------------------>
11, 13, 14, 17
Token: AssignOp 1 ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("A_2", 0)14:AssignOp(":=", 0)15:<expr>("", 0)16:Semicolon("", 0)
<------------------------------------


------------------------------------>
11, 13, 15, 17
Token: Int ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("A_2", 0)14:AssignOp(":=", 0)15:<expr>("", 0)16:Semicolon("", 0)
<------------------------------------


------------------------------------>
15, 17, 17, 19
Token: Int ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:11:13:15:17:EOP Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("A_2", 0)14:AssignOp(":=", 0)15:<expr>("", 0)16:Semicolon("", 0)17:<primary>("", 0)18:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
17, 19, 19, 20
Token: Int ; BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:15:17:17:19:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:11:13:15:17:EOP Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("A_2", 0)14:AssignOp(":=", 0)15:<expr>("", 0)16:Semicolon("", 0)17:<primary>("", 0)18:<primary-tail>("", 0)19:Int("1", 0)
<------------------------------------


------------------------------------>
15, 17, 18, 19
Token: Semicolon BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:11:13:15:17:EOP Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("A_2", 0)14:AssignOp(":=", 0)15:<expr>("", 0)16:Semicolon("", 0)17:<primary>("1", 0)18:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
18, 19, 19, 20
Token: Semicolon BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:15:17:18:19:EOP #Copy($2,$$) EOP:11:13:15:17:EOP Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("A_2", 0)14:AssignOp(":=", 0)15:<expr>("", 0)16:Semicolon("", 0)17:<primary>("1", 0)18:<primary-tail>("1", 0)19:Lambda("", 0)
<------------------------------------


------------------------------------>
11, 13, 16, 17
Token: Semicolon BEGIN A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:9:11:11:13:EOP <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<ident>("A_2", 0)14:AssignOp(":=", 0)15:<expr>("1", 0)16:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	A_2,	1)

------------------------------------>
9, 11, 12, 13
Token: Begin A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
12, 13, 13, 14
Token: Begin A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
13, 14, 14, 16
Token: Begin A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <scope> <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
14, 16, 16, 19
Token: Begin A := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)
<------------------------------------


------------------------------------>
14, 16, 17, 19
Token: Id := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)
<------------------------------------


------------------------------------>
17, 19, 19, 21
Token: Id := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
19, 21, 21, 25
Token: Id := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("", 0)22:AssignOp("", 0)23:<expr>("", 0)24:Semicolon("", 0)
<------------------------------------


------------------------------------>
21, 25, 25, 26
Token: Id := 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:19:21:21:25:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("", 0)22:AssignOp("", 0)23:<expr>("", 0)24:Semicolon("", 0)25:Id("A", 0)
<------------------------------------

SymbolTable::finding A in scope: 1
SymbolTable::finding A in scope: 2

------------------------------------>
19, 21, 22, 25
Token: AssignOp 2 ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("A_2", 0)22:AssignOp(":=", 0)23:<expr>("", 0)24:Semicolon("", 0)
<------------------------------------


------------------------------------>
19, 21, 23, 25
Token: Int ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("A_2", 0)22:AssignOp(":=", 0)23:<expr>("", 0)24:Semicolon("", 0)
<------------------------------------


------------------------------------>
23, 25, 25, 27
Token: Int ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:19:21:23:25:EOP Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("A_2", 0)22:AssignOp(":=", 0)23:<expr>("", 0)24:Semicolon("", 0)25:<primary>("", 0)26:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
25, 27, 27, 28
Token: Int ; B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:23:25:25:27:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:19:21:23:25:EOP Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("A_2", 0)22:AssignOp(":=", 0)23:<expr>("", 0)24:Semicolon("", 0)25:<primary>("", 0)26:<primary-tail>("", 0)27:Int("2", 0)
<------------------------------------


------------------------------------>
23, 25, 26, 27
Token: Semicolon B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:19:21:23:25:EOP Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("A_2", 0)22:AssignOp(":=", 0)23:<expr>("", 0)24:Semicolon("", 0)25:<primary>("2", 0)26:<primary-tail>("2", 0)
<------------------------------------


------------------------------------>
26, 27, 27, 28
Token: Semicolon B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:23:25:26:27:EOP #Copy($2,$$) EOP:19:21:23:25:EOP Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("A_2", 0)22:AssignOp(":=", 0)23:<expr>("", 0)24:Semicolon("", 0)25:<primary>("2", 0)26:<primary-tail>("2", 0)27:Lambda("", 0)
<------------------------------------


------------------------------------>
19, 21, 24, 25
Token: Semicolon B := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:17:19:19:21:EOP <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<ident>("A_2", 0)22:AssignOp(":=", 0)23:<expr>("2", 0)24:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	A_2,	2)

------------------------------------>
17, 19, 20, 21
Token: Id := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
20, 21, 21, 22
Token: Id := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
21, 22, 22, 24
Token: Id := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
22, 24, 24, 28
Token: Id := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("", 0)25:AssignOp("", 0)26:<expr>("", 0)27:Semicolon("", 0)
<------------------------------------


------------------------------------>
24, 28, 28, 29
Token: Id := 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:22:24:24:28:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("", 0)25:AssignOp("", 0)26:<expr>("", 0)27:Semicolon("", 0)28:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1
SymbolTable::finding B in scope: 2
SymbolTable::finding B in scope: 3
SymbolTable::enter(): hash value=1 symbol: B ...adding on
INSTR: (Declare,	B_3,	Integer)

------------------------------------>
22, 24, 25, 28
Token: AssignOp 2 ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("B_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)
<------------------------------------


------------------------------------>
22, 24, 26, 28
Token: Int ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("B_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)
<------------------------------------


------------------------------------>
26, 28, 28, 30
Token: Int ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("B_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("", 0)29:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
28, 30, 30, 31
Token: Int ; BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:26:28:28:30:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("B_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("", 0)29:<primary-tail>("", 0)30:Int("2", 0)
<------------------------------------


------------------------------------>
26, 28, 29, 30
Token: Semicolon BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("B_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("2", 0)29:<primary-tail>("2", 0)
<------------------------------------


------------------------------------>
29, 30, 30, 31
Token: Semicolon BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:26:28:29:30:EOP #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("B_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("2", 0)29:<primary-tail>("2", 0)30:Lambda("", 0)
<------------------------------------


------------------------------------>
22, 24, 27, 28
Token: Semicolon BEGIN A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:21:22:22:24:EOP <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("B_3", 0)25:AssignOp(":=", 0)26:<expr>("2", 0)27:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	B_3,	2)

------------------------------------>
21, 22, 23, 24
Token: Begin A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
23, 24, 24, 25
Token: Begin A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
24, 25, 25, 27
Token: Begin A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <scope> <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
25, 27, 27, 30
Token: Begin A := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)
<------------------------------------


------------------------------------>
25, 27, 28, 30
Token: Id := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)
<------------------------------------


------------------------------------>
28, 30, 30, 32
Token: Id := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
30, 32, 32, 36
Token: Id := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("", 0)33:AssignOp("", 0)34:<expr>("", 0)35:Semicolon("", 0)
<------------------------------------


------------------------------------>
32, 36, 36, 37
Token: Id := 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:30:32:32:36:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("", 0)33:AssignOp("", 0)34:<expr>("", 0)35:Semicolon("", 0)36:Id("A", 0)
<------------------------------------

SymbolTable::finding A in scope: 1
SymbolTable::finding A in scope: 2

------------------------------------>
30, 32, 33, 36
Token: AssignOp 3 ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_2", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)
<------------------------------------


------------------------------------>
30, 32, 34, 36
Token: Int ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_2", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)
<------------------------------------


------------------------------------>
34, 36, 36, 38
Token: Int ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_2", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("", 0)37:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
36, 38, 38, 39
Token: Int ; B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:34:36:36:38:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_2", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("", 0)37:<primary-tail>("", 0)38:Int("3", 0)
<------------------------------------


------------------------------------>
34, 36, 37, 38
Token: Semicolon B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_2", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("3", 0)37:<primary-tail>("3", 0)
<------------------------------------


------------------------------------>
37, 38, 38, 39
Token: Semicolon B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:34:36:37:38:EOP #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_2", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("3", 0)37:<primary-tail>("3", 0)38:Lambda("", 0)
<------------------------------------


------------------------------------>
30, 32, 35, 36
Token: Semicolon B := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:28:30:30:32:EOP <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_2", 0)33:AssignOp(":=", 0)34:<expr>("3", 0)35:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	A_2,	3)

------------------------------------>
28, 30, 31, 32
Token: Id := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
31, 32, 32, 33
Token: Id := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
32, 33, 33, 35
Token: Id := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
33, 35, 35, 39
Token: Id := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("", 0)36:AssignOp("", 0)37:<expr>("", 0)38:Semicolon("", 0)
<------------------------------------


------------------------------------>
35, 39, 39, 40
Token: Id := 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:33:35:35:39:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("", 0)36:AssignOp("", 0)37:<expr>("", 0)38:Semicolon("", 0)39:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1
SymbolTable::finding B in scope: 2
SymbolTable::finding B in scope: 3

------------------------------------>
33, 35, 36, 39
Token: AssignOp 3 ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("B_3", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)
<------------------------------------


------------------------------------>
33, 35, 37, 39
Token: Int ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("B_3", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)
<------------------------------------


------------------------------------>
37, 39, 39, 41
Token: Int ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("B_3", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("", 0)40:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
39, 41, 41, 42
Token: Int ; C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:37:39:39:41:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("B_3", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("", 0)40:<primary-tail>("", 0)41:Int("3", 0)
<------------------------------------


------------------------------------>
37, 39, 40, 41
Token: Semicolon C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("B_3", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("3", 0)40:<primary-tail>("3", 0)
<------------------------------------


------------------------------------>
40, 41, 41, 42
Token: Semicolon C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:37:39:40:41:EOP #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("B_3", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("3", 0)40:<primary-tail>("3", 0)41:Lambda("", 0)
<------------------------------------


------------------------------------>
33, 35, 38, 39
Token: Semicolon C := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("B_3", 0)36:AssignOp(":=", 0)37:<expr>("3", 0)38:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	B_3,	3)

------------------------------------>
32, 33, 34, 35
Token: Id := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
34, 35, 35, 36
Token: Id := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
35, 36, 36, 38
Token: Id := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
36, 38, 38, 42
Token: Id := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("", 0)39:AssignOp("", 0)40:<expr>("", 0)41:Semicolon("", 0)
<------------------------------------


------------------------------------>
38, 42, 42, 43
Token: Id := 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:36:38:38:42:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("", 0)39:AssignOp("", 0)40:<expr>("", 0)41:Semicolon("", 0)42:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1
SymbolTable::finding C in scope: 2
SymbolTable::finding C in scope: 3
SymbolTable::finding C in scope: 4
SymbolTable::enter(): hash value=1 symbol: C ...adding on
INSTR: (Declare,	C_4,	Integer)

------------------------------------>
36, 38, 39, 42
Token: AssignOp 3 ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("C_4", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)
<------------------------------------


------------------------------------>
36, 38, 40, 42
Token: Int ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("C_4", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)
<------------------------------------


------------------------------------>
40, 42, 42, 44
Token: Int ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("C_4", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("", 0)43:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
42, 44, 44, 45
Token: Int ; END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:40:42:42:44:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("C_4", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("", 0)43:<primary-tail>("", 0)44:Int("3", 0)
<------------------------------------


------------------------------------>
40, 42, 43, 44
Token: Semicolon END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("C_4", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("3", 0)43:<primary-tail>("3", 0)
<------------------------------------


------------------------------------>
43, 44, 44, 45
Token: Semicolon END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:40:42:43:44:EOP #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("C_4", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("3", 0)43:<primary-tail>("3", 0)44:Lambda("", 0)
<------------------------------------


------------------------------------>
36, 38, 41, 42
Token: Semicolon END BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("C_4", 0)39:AssignOp(":=", 0)40:<expr>("3", 0)41:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	C_4,	3)

------------------------------------>
35, 36, 37, 38
Token: End BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
37, 38, 38, 39
Token: End BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:28:30:31:32:EOP EOP:25:27:28:30:EOP End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:Lambda("", 0)
<------------------------------------


------------------------------------>
25, 27, 29, 30
Token: End BEGIN A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): End #End EOP:24:25:25:27:EOP <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:Begin("BEGIN", 0)28:<stmt-list>("", 0)29:End("END", 0)
<------------------------------------


------------------------------------>
24, 25, 26, 27
Token: Begin A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
26, 27, 27, 28
Token: Begin A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
27, 28, 28, 30
Token: Begin A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <scope> <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
28, 30, 30, 33
Token: Begin A := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)
<------------------------------------


------------------------------------>
28, 30, 31, 33
Token: Id := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)
<------------------------------------


------------------------------------>
31, 33, 33, 35
Token: Id := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
33, 35, 35, 39
Token: Id := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("", 0)36:AssignOp("", 0)37:<expr>("", 0)38:Semicolon("", 0)
<------------------------------------


------------------------------------>
35, 39, 39, 40
Token: Id := 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:33:35:35:39:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("", 0)36:AssignOp("", 0)37:<expr>("", 0)38:Semicolon("", 0)39:Id("A", 0)
<------------------------------------

SymbolTable::finding A in scope: 1
SymbolTable::finding A in scope: 2

------------------------------------>
33, 35, 36, 39
Token: AssignOp 4 ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("A_2", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)
<------------------------------------


------------------------------------>
33, 35, 37, 39
Token: Int ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("A_2", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)
<------------------------------------


------------------------------------>
37, 39, 39, 41
Token: Int ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("A_2", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("", 0)40:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
39, 41, 41, 42
Token: Int ; B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:37:39:39:41:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("A_2", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("", 0)40:<primary-tail>("", 0)41:Int("4", 0)
<------------------------------------


------------------------------------>
37, 39, 40, 41
Token: Semicolon B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("A_2", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("4", 0)40:<primary-tail>("4", 0)
<------------------------------------


------------------------------------>
40, 41, 41, 42
Token: Semicolon B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:37:39:40:41:EOP #Copy($2,$$) EOP:33:35:37:39:EOP Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("A_2", 0)36:AssignOp(":=", 0)37:<expr>("", 0)38:Semicolon("", 0)39:<primary>("4", 0)40:<primary-tail>("4", 0)41:Lambda("", 0)
<------------------------------------


------------------------------------>
33, 35, 38, 39
Token: Semicolon B := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:31:33:33:35:EOP <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<ident>("A_2", 0)36:AssignOp(":=", 0)37:<expr>("4", 0)38:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	A_2,	4)

------------------------------------>
31, 33, 34, 35
Token: Id := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
34, 35, 35, 36
Token: Id := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
35, 36, 36, 38
Token: Id := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
36, 38, 38, 42
Token: Id := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("", 0)39:AssignOp("", 0)40:<expr>("", 0)41:Semicolon("", 0)
<------------------------------------


------------------------------------>
38, 42, 42, 43
Token: Id := 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:36:38:38:42:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("", 0)39:AssignOp("", 0)40:<expr>("", 0)41:Semicolon("", 0)42:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1
SymbolTable::finding B in scope: 2
SymbolTable::finding B in scope: 3

------------------------------------>
36, 38, 39, 42
Token: AssignOp 4 ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("B_3", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)
<------------------------------------


------------------------------------>
36, 38, 40, 42
Token: Int ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("B_3", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)
<------------------------------------


------------------------------------>
40, 42, 42, 44
Token: Int ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("B_3", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("", 0)43:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
42, 44, 44, 45
Token: Int ; C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:40:42:42:44:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("B_3", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("", 0)43:<primary-tail>("", 0)44:Int("4", 0)
<------------------------------------


------------------------------------>
40, 42, 43, 44
Token: Semicolon C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("B_3", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("4", 0)43:<primary-tail>("4", 0)
<------------------------------------


------------------------------------>
43, 44, 44, 45
Token: Semicolon C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:40:42:43:44:EOP #Copy($2,$$) EOP:36:38:40:42:EOP Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("B_3", 0)39:AssignOp(":=", 0)40:<expr>("", 0)41:Semicolon("", 0)42:<primary>("4", 0)43:<primary-tail>("4", 0)44:Lambda("", 0)
<------------------------------------


------------------------------------>
36, 38, 41, 42
Token: Semicolon C := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:35:36:36:38:EOP <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<ident>("B_3", 0)39:AssignOp(":=", 0)40:<expr>("4", 0)41:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	B_3,	4)

------------------------------------>
35, 36, 37, 38
Token: Id := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
37, 38, 38, 39
Token: Id := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
38, 39, 39, 41
Token: Id := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
39, 41, 41, 45
Token: Id := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("", 0)42:AssignOp("", 0)43:<expr>("", 0)44:Semicolon("", 0)
<------------------------------------


------------------------------------>
41, 45, 45, 46
Token: Id := 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:39:41:41:45:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("", 0)42:AssignOp("", 0)43:<expr>("", 0)44:Semicolon("", 0)45:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1
SymbolTable::finding C in scope: 2
SymbolTable::finding C in scope: 3
SymbolTable::finding C in scope: 4
SymbolTable::enter(): hash value=1 symbol: C ...adding on
INSTR: (Declare,	C_4,	Integer)

------------------------------------>
39, 41, 42, 45
Token: AssignOp 4 ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("C_4", 0)42:AssignOp(":=", 0)43:<expr>("", 0)44:Semicolon("", 0)
<------------------------------------


------------------------------------>
39, 41, 43, 45
Token: Int ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("C_4", 0)42:AssignOp(":=", 0)43:<expr>("", 0)44:Semicolon("", 0)
<------------------------------------


------------------------------------>
43, 45, 45, 47
Token: Int ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:39:41:43:45:EOP Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("C_4", 0)42:AssignOp(":=", 0)43:<expr>("", 0)44:Semicolon("", 0)45:<primary>("", 0)46:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
45, 47, 47, 48
Token: Int ; END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:43:45:45:47:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:39:41:43:45:EOP Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("C_4", 0)42:AssignOp(":=", 0)43:<expr>("", 0)44:Semicolon("", 0)45:<primary>("", 0)46:<primary-tail>("", 0)47:Int("4", 0)
<------------------------------------


------------------------------------>
43, 45, 46, 47
Token: Semicolon END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:39:41:43:45:EOP Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("C_4", 0)42:AssignOp(":=", 0)43:<expr>("", 0)44:Semicolon("", 0)45:<primary>("4", 0)46:<primary-tail>("4", 0)
<------------------------------------


------------------------------------>
46, 47, 47, 48
Token: Semicolon END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:43:45:46:47:EOP #Copy($2,$$) EOP:39:41:43:45:EOP Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("C_4", 0)42:AssignOp(":=", 0)43:<expr>("", 0)44:Semicolon("", 0)45:<primary>("4", 0)46:<primary-tail>("4", 0)47:Lambda("", 0)
<------------------------------------


------------------------------------>
39, 41, 44, 45
Token: Semicolon END D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:38:39:39:41:EOP <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:<ident>("C_4", 0)42:AssignOp(":=", 0)43:<expr>("4", 0)44:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	C_4,	4)

------------------------------------>
38, 39, 40, 41
Token: End D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
40, 41, 41, 42
Token: End D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:38:39:40:41:EOP EOP:37:38:38:39:EOP EOP:35:36:37:38:EOP EOP:34:35:35:36:EOP EOP:31:33:34:35:EOP EOP:28:30:31:33:EOP End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:<stmt-list>("", 0)36:<stmt>("", 0)37:<stmt-tail>("", 0)38:<stmt-list>("", 0)39:<stmt>("", 0)40:<stmt-tail>("", 0)41:Lambda("", 0)
<------------------------------------


------------------------------------>
28, 30, 32, 33
Token: End D := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): End #End EOP:27:28:28:30:EOP <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:Begin("BEGIN", 0)31:<stmt-list>("", 0)32:End("END", 0)
<------------------------------------


------------------------------------>
27, 28, 29, 30
Token: Id := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
29, 30, 30, 31
Token: Id := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
30, 31, 31, 33
Token: Id := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
31, 33, 33, 37
Token: Id := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("", 0)34:AssignOp("", 0)35:<expr>("", 0)36:Semicolon("", 0)
<------------------------------------


------------------------------------>
33, 37, 37, 38
Token: Id := 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:31:33:33:37:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("", 0)34:AssignOp("", 0)35:<expr>("", 0)36:Semicolon("", 0)37:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1
SymbolTable::finding D in scope: 2
SymbolTable::finding D in scope: 3
SymbolTable::enter(): hash value=1 symbol: D ...adding on
INSTR: (Declare,	D_3,	Integer)

------------------------------------>
31, 33, 34, 37
Token: AssignOp 44 ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("D_3", 0)34:AssignOp(":=", 0)35:<expr>("", 0)36:Semicolon("", 0)
<------------------------------------


------------------------------------>
31, 33, 35, 37
Token: Int ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("D_3", 0)34:AssignOp(":=", 0)35:<expr>("", 0)36:Semicolon("", 0)
<------------------------------------


------------------------------------>
35, 37, 37, 39
Token: Int ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:31:33:35:37:EOP Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("D_3", 0)34:AssignOp(":=", 0)35:<expr>("", 0)36:Semicolon("", 0)37:<primary>("", 0)38:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
37, 39, 39, 40
Token: Int ; END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:35:37:37:39:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:31:33:35:37:EOP Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("D_3", 0)34:AssignOp(":=", 0)35:<expr>("", 0)36:Semicolon("", 0)37:<primary>("", 0)38:<primary-tail>("", 0)39:Int("44", 0)
<------------------------------------


------------------------------------>
35, 37, 38, 39
Token: Semicolon END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:31:33:35:37:EOP Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("D_3", 0)34:AssignOp(":=", 0)35:<expr>("", 0)36:Semicolon("", 0)37:<primary>("44", 0)38:<primary-tail>("44", 0)
<------------------------------------


------------------------------------>
38, 39, 39, 40
Token: Semicolon END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:35:37:38:39:EOP #Copy($2,$$) EOP:31:33:35:37:EOP Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("D_3", 0)34:AssignOp(":=", 0)35:<expr>("", 0)36:Semicolon("", 0)37:<primary>("44", 0)38:<primary-tail>("44", 0)39:Lambda("", 0)
<------------------------------------


------------------------------------>
31, 33, 36, 37
Token: Semicolon END BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:30:31:31:33:EOP <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:<ident>("D_3", 0)34:AssignOp(":=", 0)35:<expr>("44", 0)36:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	D_3,	44)

------------------------------------>
30, 31, 32, 33
Token: End BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
32, 33, 33, 34
Token: End BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:30:31:32:33:EOP EOP:29:30:30:31:EOP EOP:27:28:29:30:EOP EOP:26:27:27:28:EOP EOP:24:25:26:27:EOP EOP:23:24:24:25:EOP EOP:21:22:23:24:EOP EOP:20:21:21:22:EOP EOP:17:19:20:21:EOP EOP:14:16:17:19:EOP End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("", 0)19:<stmt>("", 0)20:<stmt-tail>("", 0)21:<stmt-list>("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<stmt-list>("", 0)25:<scope>("", 0)26:<stmt-tail>("", 0)27:<stmt-list>("", 0)28:<scope>("", 0)29:<stmt-tail>("", 0)30:<stmt-list>("", 0)31:<stmt>("", 0)32:<stmt-tail>("", 0)33:Lambda("", 0)
<------------------------------------


------------------------------------>
14, 16, 18, 19
Token: End BEGIN E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): End #End EOP:13:14:14:16:EOP <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:Begin("BEGIN", 0)17:<stmt-list>("", 0)18:End("END", 0)
<------------------------------------


------------------------------------>
13, 14, 15, 16
Token: Begin E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
15, 16, 16, 17
Token: Begin E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
16, 17, 17, 19
Token: Begin E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <scope> <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
17, 19, 19, 22
Token: Begin E := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)
<------------------------------------


------------------------------------>
17, 19, 20, 22
Token: Id := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)
<------------------------------------


------------------------------------>
20, 22, 22, 24
Token: Id := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
22, 24, 24, 28
Token: Id := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("", 0)25:AssignOp("", 0)26:<expr>("", 0)27:Semicolon("", 0)
<------------------------------------


------------------------------------>
24, 28, 28, 29
Token: Id := 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:22:24:24:28:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("", 0)25:AssignOp("", 0)26:<expr>("", 0)27:Semicolon("", 0)28:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1
SymbolTable::finding E in scope: 2
SymbolTable::finding E in scope: 3
SymbolTable::enter(): hash value=1 symbol: E ...adding on
extending...
INSTR: (Declare,	E_3,	Integer)

------------------------------------>
22, 24, 25, 28
Token: AssignOp 44 ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("E_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)
<------------------------------------


------------------------------------>
22, 24, 26, 28
Token: Int ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("E_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)
<------------------------------------


------------------------------------>
26, 28, 28, 30
Token: Int ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("E_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("", 0)29:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
28, 30, 30, 31
Token: Int ; END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:26:28:28:30:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("E_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("", 0)29:<primary-tail>("", 0)30:Int("44", 0)
<------------------------------------


------------------------------------>
26, 28, 29, 30
Token: Semicolon END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("E_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("44", 0)29:<primary-tail>("44", 0)
<------------------------------------


------------------------------------>
29, 30, 30, 31
Token: Semicolon END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:26:28:29:30:EOP #Copy($2,$$) EOP:22:24:26:28:EOP Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("E_3", 0)25:AssignOp(":=", 0)26:<expr>("", 0)27:Semicolon("", 0)28:<primary>("44", 0)29:<primary-tail>("44", 0)30:Lambda("", 0)
<------------------------------------


------------------------------------>
22, 24, 27, 28
Token: Semicolon END E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:20:22:22:24:EOP <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:<ident>("E_3", 0)25:AssignOp(":=", 0)26:<expr>("44", 0)27:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	E_3,	44)

------------------------------------>
20, 22, 23, 24
Token: End E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
23, 24, 24, 25
Token: End E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:20:22:23:24:EOP EOP:17:19:20:22:EOP End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("", 0)22:<stmt>("", 0)23:<stmt-tail>("", 0)24:Lambda("", 0)
<------------------------------------


------------------------------------>
17, 19, 21, 22
Token: End E := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): End #End EOP:16:17:17:19:EOP <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:Begin("BEGIN", 0)20:<stmt-list>("", 0)21:End("END", 0)
<------------------------------------


------------------------------------>
16, 17, 18, 19
Token: Id := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
18, 19, 19, 20
Token: Id := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
19, 20, 20, 22
Token: Id := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
20, 22, 22, 26
Token: Id := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("", 0)23:AssignOp("", 0)24:<expr>("", 0)25:Semicolon("", 0)
<------------------------------------


------------------------------------>
22, 26, 26, 27
Token: Id := 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:20:22:22:26:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("", 0)23:AssignOp("", 0)24:<expr>("", 0)25:Semicolon("", 0)26:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1
SymbolTable::finding E in scope: 2
SymbolTable::enter(): hash value=1 symbol: E ...adding on
INSTR: (Declare,	E_2,	Integer)

------------------------------------>
20, 22, 23, 26
Token: AssignOp 11 ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("E_2", 0)23:AssignOp(":=", 0)24:<expr>("", 0)25:Semicolon("", 0)
<------------------------------------


------------------------------------>
20, 22, 24, 26
Token: Int ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("E_2", 0)23:AssignOp(":=", 0)24:<expr>("", 0)25:Semicolon("", 0)
<------------------------------------


------------------------------------>
24, 26, 26, 28
Token: Int ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:20:22:24:26:EOP Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("E_2", 0)23:AssignOp(":=", 0)24:<expr>("", 0)25:Semicolon("", 0)26:<primary>("", 0)27:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
26, 28, 28, 29
Token: Int ; END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:24:26:26:28:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:20:22:24:26:EOP Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("E_2", 0)23:AssignOp(":=", 0)24:<expr>("", 0)25:Semicolon("", 0)26:<primary>("", 0)27:<primary-tail>("", 0)28:Int("11", 0)
<------------------------------------


------------------------------------>
24, 26, 27, 28
Token: Semicolon END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:20:22:24:26:EOP Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("E_2", 0)23:AssignOp(":=", 0)24:<expr>("", 0)25:Semicolon("", 0)26:<primary>("11", 0)27:<primary-tail>("11", 0)
<------------------------------------


------------------------------------>
27, 28, 28, 29
Token: Semicolon END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:24:26:27:28:EOP #Copy($2,$$) EOP:20:22:24:26:EOP Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("E_2", 0)23:AssignOp(":=", 0)24:<expr>("", 0)25:Semicolon("", 0)26:<primary>("11", 0)27:<primary-tail>("11", 0)28:Lambda("", 0)
<------------------------------------


------------------------------------>
20, 22, 25, 26
Token: Semicolon END WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:19:20:20:22:EOP <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:<ident>("E_2", 0)23:AssignOp(":=", 0)24:<expr>("11", 0)25:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	E_2,	11)

------------------------------------>
19, 20, 21, 22
Token: End WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
21, 22, 22, 23
Token: End WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:19:20:21:22:EOP EOP:18:19:19:20:EOP EOP:16:17:18:19:EOP EOP:15:16:16:17:EOP EOP:13:14:15:16:EOP EOP:12:13:13:14:EOP EOP:9:11:12:13:EOP EOP:6:8:9:11:EOP End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("", 0)11:<stmt>("", 0)12:<stmt-tail>("", 0)13:<stmt-list>("", 0)14:<scope>("", 0)15:<stmt-tail>("", 0)16:<stmt-list>("", 0)17:<scope>("", 0)18:<stmt-tail>("", 0)19:<stmt-list>("", 0)20:<stmt>("", 0)21:<stmt-tail>("", 0)22:Lambda("", 0)
<------------------------------------


------------------------------------>
6, 8, 10, 11
Token: End WRITE ( A , B , C , D ) ; END Eof 
Parse (l-r): End #End EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:Begin("BEGIN", 0)9:<stmt-list>("", 0)10:End("END", 0)
<------------------------------------


------------------------------------>
4, 6, 7, 8
Token: Write ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
7, 8, 8, 9
Token: Write ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt-list> EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
8, 9, 9, 11
Token: Write ( A , B , C , D ) ; END Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
9, 11, 11, 16
Token: Write ( A , B , C , D ) ; END Eof 
Parse (l-r): Write LParen <expr-list> RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)
<------------------------------------


------------------------------------>
9, 11, 12, 16
Token: LParen A , B , C , D ) ; END Eof 
Parse (l-r): LParen <expr-list> RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)
<------------------------------------


------------------------------------>
9, 11, 13, 16
Token: Id , B , C , D ) ; END Eof 
Parse (l-r): <expr-list> RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)
<------------------------------------


------------------------------------>
13, 16, 16, 18
Token: Id , B , C , D ) ; END Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("", 0)17:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
16, 18, 18, 20
Token: Id , B , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:13:16:16:18:EOP #WriteExpr($1) <expr-tail> EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("", 0)17:<expr-tail>("", 0)18:<primary>("", 0)19:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
18, 20, 20, 21
Token: Id , B , C , D ) ; END Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:16:18:18:20:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:13:16:16:18:EOP #WriteExpr($1) <expr-tail> EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("", 0)17:<expr-tail>("", 0)18:<primary>("", 0)19:<primary-tail>("", 0)20:<ident>("", 0)
<------------------------------------


------------------------------------>
20, 21, 21, 22
Token: Id , B , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:18:20:20:21:EOP #Copy($1,$$) EOP:16:18:18:20:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:13:16:16:18:EOP #WriteExpr($1) <expr-tail> EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("", 0)17:<expr-tail>("", 0)18:<primary>("", 0)19:<primary-tail>("", 0)20:<ident>("", 0)21:Id("A", 0)
<------------------------------------

SymbolTable::enter(): hash value=1 symbol: A ...starting new
INSTR: (Declare,	A_1,	Integer)

------------------------------------>
16, 18, 19, 20
Token: Comma B , C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:13:16:16:18:EOP #WriteExpr($1) <expr-tail> EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("", 0)17:<expr-tail>("", 0)18:<primary>("A_1", 0)19:<primary-tail>("A_1", 0)
<------------------------------------


------------------------------------>
19, 20, 20, 21
Token: Comma B , C , D ) ; END Eof 
Parse (l-r): Lambda EOP:16:18:19:20:EOP #Copy($2,$$) EOP:13:16:16:18:EOP #WriteExpr($1) <expr-tail> EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("", 0)17:<expr-tail>("", 0)18:<primary>("A_1", 0)19:<primary-tail>("A_1", 0)20:Lambda("", 0)
<------------------------------------

INSTR: (Write,	A_1,	Integer)

------------------------------------>
13, 16, 17, 18
Token: Comma B , C , D ) ; END Eof 
Parse (l-r): <expr-tail> EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
17, 18, 18, 20
Token: Comma B , C , D ) ; END Eof 
Parse (l-r): Comma <expr-list> EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)
<------------------------------------


------------------------------------>
17, 18, 19, 20
Token: Id , C , D ) ; END Eof 
Parse (l-r): <expr-list> EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)
<------------------------------------


------------------------------------>
19, 20, 20, 22
Token: Id , C , D ) ; END Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("", 0)21:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
20, 22, 22, 24
Token: Id , C , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:19:20:20:22:EOP #WriteExpr($1) <expr-tail> EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("", 0)21:<expr-tail>("", 0)22:<primary>("", 0)23:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
22, 24, 24, 25
Token: Id , C , D ) ; END Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:20:22:22:24:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:19:20:20:22:EOP #WriteExpr($1) <expr-tail> EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("", 0)21:<expr-tail>("", 0)22:<primary>("", 0)23:<primary-tail>("", 0)24:<ident>("", 0)
<------------------------------------


------------------------------------>
24, 25, 25, 26
Token: Id , C , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:22:24:24:25:EOP #Copy($1,$$) EOP:20:22:22:24:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:19:20:20:22:EOP #WriteExpr($1) <expr-tail> EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("", 0)21:<expr-tail>("", 0)22:<primary>("", 0)23:<primary-tail>("", 0)24:<ident>("", 0)25:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1
SymbolTable::enter(): hash value=1 symbol: B ...adding on
INSTR: (Declare,	B_1,	Integer)

------------------------------------>
20, 22, 23, 24
Token: Comma C , D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:19:20:20:22:EOP #WriteExpr($1) <expr-tail> EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("", 0)21:<expr-tail>("", 0)22:<primary>("B_1", 0)23:<primary-tail>("B_1", 0)
<------------------------------------


------------------------------------>
23, 24, 24, 25
Token: Comma C , D ) ; END Eof 
Parse (l-r): Lambda EOP:20:22:23:24:EOP #Copy($2,$$) EOP:19:20:20:22:EOP #WriteExpr($1) <expr-tail> EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("", 0)21:<expr-tail>("", 0)22:<primary>("B_1", 0)23:<primary-tail>("B_1", 0)24:Lambda("", 0)
<------------------------------------

INSTR: (Write,	B_1,	Integer)

------------------------------------>
19, 20, 21, 22
Token: Comma C , D ) ; END Eof 
Parse (l-r): <expr-tail> EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
21, 22, 22, 24
Token: Comma C , D ) ; END Eof 
Parse (l-r): Comma <expr-list> EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)
<------------------------------------


------------------------------------>
21, 22, 23, 24
Token: Id , D ) ; END Eof 
Parse (l-r): <expr-list> EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)
<------------------------------------


------------------------------------>
23, 24, 24, 26
Token: Id , D ) ; END Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("", 0)25:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
24, 26, 26, 28
Token: Id , D ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:23:24:24:26:EOP #WriteExpr($1) <expr-tail> EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("", 0)25:<expr-tail>("", 0)26:<primary>("", 0)27:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
26, 28, 28, 29
Token: Id , D ) ; END Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:24:26:26:28:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:23:24:24:26:EOP #WriteExpr($1) <expr-tail> EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("", 0)25:<expr-tail>("", 0)26:<primary>("", 0)27:<primary-tail>("", 0)28:<ident>("", 0)
<------------------------------------


------------------------------------>
28, 29, 29, 30
Token: Id , D ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:26:28:28:29:EOP #Copy($1,$$) EOP:24:26:26:28:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:23:24:24:26:EOP #WriteExpr($1) <expr-tail> EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("", 0)25:<expr-tail>("", 0)26:<primary>("", 0)27:<primary-tail>("", 0)28:<ident>("", 0)29:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1
SymbolTable::enter(): hash value=1 symbol: C ...adding on
INSTR: (Declare,	C_1,	Integer)

------------------------------------>
24, 26, 27, 28
Token: Comma D ) ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:23:24:24:26:EOP #WriteExpr($1) <expr-tail> EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("", 0)25:<expr-tail>("", 0)26:<primary>("C_1", 0)27:<primary-tail>("C_1", 0)
<------------------------------------


------------------------------------>
27, 28, 28, 29
Token: Comma D ) ; END Eof 
Parse (l-r): Lambda EOP:24:26:27:28:EOP #Copy($2,$$) EOP:23:24:24:26:EOP #WriteExpr($1) <expr-tail> EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("", 0)25:<expr-tail>("", 0)26:<primary>("C_1", 0)27:<primary-tail>("C_1", 0)28:Lambda("", 0)
<------------------------------------

INSTR: (Write,	C_1,	Integer)

------------------------------------>
23, 24, 25, 26
Token: Comma D ) ; END Eof 
Parse (l-r): <expr-tail> EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
25, 26, 26, 28
Token: Comma D ) ; END Eof 
Parse (l-r): Comma <expr-list> EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)
<------------------------------------


------------------------------------>
25, 26, 27, 28
Token: Id ) ; END Eof 
Parse (l-r): <expr-list> EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)
<------------------------------------


------------------------------------>
27, 28, 28, 30
Token: Id ) ; END Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("", 0)29:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
28, 30, 30, 32
Token: Id ) ; END Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:27:28:28:30:EOP #WriteExpr($1) <expr-tail> EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("", 0)29:<expr-tail>("", 0)30:<primary>("", 0)31:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
30, 32, 32, 33
Token: Id ) ; END Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:28:30:30:32:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:27:28:28:30:EOP #WriteExpr($1) <expr-tail> EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("", 0)29:<expr-tail>("", 0)30:<primary>("", 0)31:<primary-tail>("", 0)32:<ident>("", 0)
<------------------------------------


------------------------------------>
32, 33, 33, 34
Token: Id ) ; END Eof 
Parse (l-r): Id #ProcessId($$) EOP:30:32:32:33:EOP #Copy($1,$$) EOP:28:30:30:32:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:27:28:28:30:EOP #WriteExpr($1) <expr-tail> EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("", 0)29:<expr-tail>("", 0)30:<primary>("", 0)31:<primary-tail>("", 0)32:<ident>("", 0)33:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1
SymbolTable::enter(): hash value=1 symbol: D ...adding on
extending...
INSTR: (Declare,	D_1,	Integer)

------------------------------------>
28, 30, 31, 32
Token: RParen ; END Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:27:28:28:30:EOP #WriteExpr($1) <expr-tail> EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("", 0)29:<expr-tail>("", 0)30:<primary>("D_1", 0)31:<primary-tail>("D_1", 0)
<------------------------------------


------------------------------------>
31, 32, 32, 33
Token: RParen ; END Eof 
Parse (l-r): Lambda EOP:28:30:31:32:EOP #Copy($2,$$) EOP:27:28:28:30:EOP #WriteExpr($1) <expr-tail> EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("", 0)29:<expr-tail>("", 0)30:<primary>("D_1", 0)31:<primary-tail>("D_1", 0)32:Lambda("", 0)
<------------------------------------

INSTR: (Write,	D_1,	Integer)

------------------------------------>
27, 28, 29, 30
Token: RParen ; END Eof 
Parse (l-r): <expr-tail> EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("D_1", 0)29:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
29, 30, 30, 31
Token: RParen ; END Eof 
Parse (l-r): Lambda EOP:27:28:29:30:EOP EOP:25:26:27:28:EOP EOP:23:24:25:26:EOP EOP:21:22:23:24:EOP EOP:19:20:21:22:EOP EOP:17:18:19:20:EOP EOP:13:16:17:18:EOP EOP:9:11:13:16:EOP RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen("", 0)15:Semicolon("", 0)16:<expr>("A_1", 0)17:<expr-tail>("", 0)18:Comma(",", 0)19:<expr-list>("", 0)20:<expr>("B_1", 0)21:<expr-tail>("", 0)22:Comma(",", 0)23:<expr-list>("", 0)24:<expr>("C_1", 0)25:<expr-tail>("", 0)26:Comma(",", 0)27:<expr-list>("", 0)28:<expr>("D_1", 0)29:<expr-tail>("", 0)30:Lambda("", 0)
<------------------------------------


------------------------------------>
9, 11, 14, 16
Token: RParen ; END Eof 
Parse (l-r): RParen Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen(")", 0)15:Semicolon("", 0)
<------------------------------------


------------------------------------>
9, 11, 15, 16
Token: Semicolon END Eof 
Parse (l-r): Semicolon EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Write("WRITE", 0)12:LParen("(", 0)13:<expr-list>("", 0)14:RParen(")", 0)15:Semicolon(";", 0)
<------------------------------------


------------------------------------>
8, 9, 10, 11
Token: End Eof 
Parse (l-r): <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
10, 11, 11, 12
Token: End Eof 
Parse (l-r): Lambda EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("", 0)6:<scope>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:Lambda("", 0)
<------------------------------------


------------------------------------>
1, 3, 5, 6
Token: End Eof 
Parse (l-r): End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("BEGIN", 0)4:<stmt-list>("", 0)5:End("END", 0)
<------------------------------------

INSTR: (Halt)
