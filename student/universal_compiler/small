------printing-------
--left--
<addOp> <expr> <ident> <primary> <program> <stmt-list> <stmt-tail> <stmt> <system-goal> 
--right--
#Start <ident> #Copy($1,$$) <primary> #Copy($1,$2) <primary> #Copy($2,$$) <program> <stmt-list> <stmt> <stmt-tail> AssignOp <expr> Begin <stmt-list> End Eof #Finish Id #ProcessId($$) Int #ProcessLiteral($$) LParen <expr> Lambda MinusOp #ProcessOp($$) PlusOp #ProcessOp($$) RParen #Copy($2,$$) Read LParen <ident> RParen Semicolon #Assign($1,$3) Write LParen <expr> RParen Semicolon 
--terminals--
AssignOp Begin End Eof Id Int LParen Lambda MinusOp PlusOp RParen Read LParen RParen Semicolon Write LParen RParen Semicolon 
--nonterminals--
<addOp> <expr> <ident> <primary> <primary> <program> <stmt-list> <stmt-tail> <stmt> <stmt-tail> <system-goal> <expr> <stmt-list> <expr> <ident> <expr> 

--productions--
<addOp> --> PlusOp #ProcessOp($$) 
<addOp> --> MinusOp #ProcessOp($$) 
<expr> --> <primary> #Copy($1,$2) <primary> #Copy($2,$$) 
<ident> --> Id #ProcessId($$) 
<primary> --> LParen <expr> RParen #Copy($2,$$) 
<primary> --> <ident> #Copy($1,$$) 
<primary> --> Int #ProcessLiteral($$) 
<program> --> #Start Begin <stmt-list> End 
<stmt-list> --> <stmt> <stmt-tail> 
<stmt-tail> --> <stmt-list> 
<stmt-tail> --> Lambda 
<stmt> --> <ident> AssignOp <expr> Semicolon #Assign($1,$3) 
<stmt> --> Read LParen <ident> RParen Semicolon 
<stmt> --> Write LParen <expr> RParen Semicolon 
<system-goal> --> <program> Eof #Finish 
<stmt-tail> Lambda 
------test initFirst-------
                  <addOp> --> MinusOp PlusOp 
                   <expr> --> 
                  <ident> --> Id 
                <primary> --> Int LParen 
                <program> --> Begin 
              <stmt-list> --> 
              <stmt-tail> --> Lambda 
                   <stmt> --> Read Write 
            <system-goal> --> 
---------------------------
------fillFirstSet-------
 First Set contents: 
                  <addOp> --> MinusOp PlusOp 
                   <expr> --> Id Int LParen 
                  <ident> --> Id 
                <primary> --> Id Int LParen 
                <program> --> Begin 
              <stmt-list> --> Id Read Write 
              <stmt-tail> --> Id Lambda Read Write 
                   <stmt> --> Id Read Write 
            <system-goal> --> Begin 
                 AssignOp --> AssignOp 
                    Begin --> Begin 
                      End --> End 
                      Eof --> Eof 
                       Id --> Id 
                      Int --> Int 
                   LParen --> LParen 
                   Lambda --> Lambda 
                  MinusOp --> MinusOp 
                   PlusOp --> PlusOp 
                   RParen --> RParen 
                     Read --> Read 
                Semicolon --> Semicolon 
                    Write --> Write 
------------------------------------------
------fillFollowSet-------
followSet(        <addOp>) = { }
followSet(         <expr>) = {"RParen", "Semicolon",  }
followSet(        <ident>) = {"AssignOp", "RParen",  }
followSet(      <primary>) = { }
followSet(      <program>) = {"Eof",  }
followSet(    <stmt-list>) = {"End",  }
followSet(    <stmt-tail>) = {"End",  }
followSet(         <stmt>) = {"End", "Id", "Read", "Write",  }
followSet(  <system-goal>) = {"Lambda",  }

----- fillPredictSet-----
{                                } predicts:      <program> --> #Start Begin <stmt-list> End         
{ "Begin",                       } predicts: <system-goal>  --> <program> Eof #Finish                
{ "End",                         } predicts: <stmt-tail>    --> Lambda                               
{ "Id",                          } predicts: <ident>        --> Id #ProcessId($$)                    
{ "Id", "Int", "LParen",         } predicts: <expr>         --> <primary> #Copy($1,$2) <primary> #Copy($2,$$) 
{ "Id", "Read", "Write",         } predicts: <stmt-list>    --> <stmt> <stmt-tail>                   
{ "Int",                         } predicts: <primary>      --> Int #ProcessLiteral($$)              
{ "LParen",                      } predicts: <primary>      --> LParen <expr> RParen #Copy($2,$$)    
{ "MinusOp",                     } predicts: <addOp>        --> MinusOp #ProcessOp($$)               
{ "PlusOp",                      } predicts: <addOp>        --> PlusOp #ProcessOp($$)                
{ "Read",                        } predicts: <stmt>         --> Read LParen <ident> RParen Semicolon 
{ "Write",                       } predicts: <stmt>         --> Write LParen <expr> RParen Semicolon 
----- fillParseTable-----
(<addOp>, AssignOp) --> 
(<addOp>, Begin) --> 
(<addOp>, End) --> 
(<addOp>, Eof) --> 
(<addOp>, Id) --> 
(<addOp>, Int) --> 
(<addOp>, LParen) --> 
(<addOp>, Lambda) --> 
(<addOp>, MinusOp) --> <addOp>MinusOp #ProcessOp($$) 
(<addOp>, PlusOp) --> <addOp>PlusOp #ProcessOp($$) 
(<addOp>, RParen) --> 
(<addOp>, Read) --> 
(<addOp>, LParen) --> 
(<addOp>, RParen) --> 
(<addOp>, Semicolon) --> 
(<addOp>, Write) --> 
(<addOp>, LParen) --> 
(<addOp>, RParen) --> 
(<addOp>, Semicolon) --> 

(<expr>, AssignOp) --> 
(<expr>, Begin) --> 
(<expr>, End) --> 
(<expr>, Eof) --> 
(<expr>, Id) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Int) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Lambda) --> 
(<expr>, MinusOp) --> 
(<expr>, PlusOp) --> 
(<expr>, RParen) --> 
(<expr>, Read) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 
(<expr>, Write) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 

(<ident>, AssignOp) --> 
(<ident>, Begin) --> 
(<ident>, End) --> 
(<ident>, Eof) --> 
(<ident>, Id) --> <ident>Id #ProcessId($$) 
(<ident>, Int) --> 
(<ident>, LParen) --> 
(<ident>, Lambda) --> 
(<ident>, MinusOp) --> 
(<ident>, PlusOp) --> 
(<ident>, RParen) --> 
(<ident>, Read) --> 
(<ident>, LParen) --> 
(<ident>, RParen) --> 
(<ident>, Semicolon) --> 
(<ident>, Write) --> 
(<ident>, LParen) --> 
(<ident>, RParen) --> 
(<ident>, Semicolon) --> 

(<primary>, AssignOp) --> 
(<primary>, Begin) --> 
(<primary>, End) --> 
(<primary>, Eof) --> 
(<primary>, Id) --> <primary><ident> #Copy($1,$$) 
(<primary>, Int) --> <primary>Int #ProcessLiteral($$) 
(<primary>, LParen) --> <primary>LParen <expr> RParen #Copy($2,$$) 
(<primary>, Lambda) --> 
(<primary>, MinusOp) --> 
(<primary>, PlusOp) --> 
(<primary>, RParen) --> 
(<primary>, Read) --> 
(<primary>, LParen) --> <primary>LParen <expr> RParen #Copy($2,$$) 
(<primary>, RParen) --> 
(<primary>, Semicolon) --> 
(<primary>, Write) --> 
(<primary>, LParen) --> <primary>LParen <expr> RParen #Copy($2,$$) 
(<primary>, RParen) --> 
(<primary>, Semicolon) --> 

(<primary>, AssignOp) --> 
(<primary>, Begin) --> 
(<primary>, End) --> 
(<primary>, Eof) --> 
(<primary>, Id) --> <primary><ident> #Copy($1,$$) 
(<primary>, Int) --> <primary>Int #ProcessLiteral($$) 
(<primary>, LParen) --> <primary>LParen <expr> RParen #Copy($2,$$) 
(<primary>, Lambda) --> 
(<primary>, MinusOp) --> 
(<primary>, PlusOp) --> 
(<primary>, RParen) --> 
(<primary>, Read) --> 
(<primary>, LParen) --> <primary>LParen <expr> RParen #Copy($2,$$) 
(<primary>, RParen) --> 
(<primary>, Semicolon) --> 
(<primary>, Write) --> 
(<primary>, LParen) --> <primary>LParen <expr> RParen #Copy($2,$$) 
(<primary>, RParen) --> 
(<primary>, Semicolon) --> 

(<program>, AssignOp) --> 
(<program>, Begin) --> 
(<program>, End) --> 
(<program>, Eof) --> 
(<program>, Id) --> 
(<program>, Int) --> 
(<program>, LParen) --> 
(<program>, Lambda) --> 
(<program>, MinusOp) --> 
(<program>, PlusOp) --> 
(<program>, RParen) --> 
(<program>, Read) --> 
(<program>, LParen) --> 
(<program>, RParen) --> 
(<program>, Semicolon) --> 
(<program>, Write) --> 
(<program>, LParen) --> 
(<program>, RParen) --> 
(<program>, Semicolon) --> 

(<stmt-list>, AssignOp) --> 
(<stmt-list>, Begin) --> 
(<stmt-list>, End) --> 
(<stmt-list>, Eof) --> 
(<stmt-list>, Id) --> <stmt-list><stmt> <stmt-tail> 
(<stmt-list>, Int) --> 
(<stmt-list>, LParen) --> 
(<stmt-list>, Lambda) --> 
(<stmt-list>, MinusOp) --> 
(<stmt-list>, PlusOp) --> 
(<stmt-list>, RParen) --> 
(<stmt-list>, Read) --> <stmt-list><stmt> <stmt-tail> 
(<stmt-list>, LParen) --> 
(<stmt-list>, RParen) --> 
(<stmt-list>, Semicolon) --> 
(<stmt-list>, Write) --> <stmt-list><stmt> <stmt-tail> 
(<stmt-list>, LParen) --> 
(<stmt-list>, RParen) --> 
(<stmt-list>, Semicolon) --> 

(<stmt-tail>, AssignOp) --> 
(<stmt-tail>, Begin) --> 
(<stmt-tail>, End) --> <stmt-tail>Lambda 
(<stmt-tail>, Eof) --> 
(<stmt-tail>, Id) --> <stmt-tail><stmt-list> 
(<stmt-tail>, Int) --> 
(<stmt-tail>, LParen) --> 
(<stmt-tail>, Lambda) --> 
(<stmt-tail>, MinusOp) --> 
(<stmt-tail>, PlusOp) --> 
(<stmt-tail>, RParen) --> 
(<stmt-tail>, Read) --> <stmt-tail><stmt-list> 
(<stmt-tail>, LParen) --> 
(<stmt-tail>, RParen) --> 
(<stmt-tail>, Semicolon) --> 
(<stmt-tail>, Write) --> <stmt-tail><stmt-list> 
(<stmt-tail>, LParen) --> 
(<stmt-tail>, RParen) --> 
(<stmt-tail>, Semicolon) --> 

(<stmt>, AssignOp) --> 
(<stmt>, Begin) --> 
(<stmt>, End) --> 
(<stmt>, Eof) --> 
(<stmt>, Id) --> <stmt><ident> AssignOp <expr> Semicolon #Assign($1,$3) 
(<stmt>, Int) --> 
(<stmt>, LParen) --> 
(<stmt>, Lambda) --> 
(<stmt>, MinusOp) --> 
(<stmt>, PlusOp) --> 
(<stmt>, RParen) --> 
(<stmt>, Read) --> <stmt>Read LParen <ident> RParen Semicolon 
(<stmt>, LParen) --> 
(<stmt>, RParen) --> 
(<stmt>, Semicolon) --> 
(<stmt>, Write) --> <stmt>Write LParen <expr> RParen Semicolon 
(<stmt>, LParen) --> 
(<stmt>, RParen) --> 
(<stmt>, Semicolon) --> 

(<stmt-tail>, AssignOp) --> 
(<stmt-tail>, Begin) --> 
(<stmt-tail>, End) --> <stmt-tail>Lambda 
(<stmt-tail>, Eof) --> 
(<stmt-tail>, Id) --> <stmt-tail><stmt-list> 
(<stmt-tail>, Int) --> 
(<stmt-tail>, LParen) --> 
(<stmt-tail>, Lambda) --> 
(<stmt-tail>, MinusOp) --> 
(<stmt-tail>, PlusOp) --> 
(<stmt-tail>, RParen) --> 
(<stmt-tail>, Read) --> <stmt-tail><stmt-list> 
(<stmt-tail>, LParen) --> 
(<stmt-tail>, RParen) --> 
(<stmt-tail>, Semicolon) --> 
(<stmt-tail>, Write) --> <stmt-tail><stmt-list> 
(<stmt-tail>, LParen) --> 
(<stmt-tail>, RParen) --> 
(<stmt-tail>, Semicolon) --> 

(<system-goal>, AssignOp) --> 
(<system-goal>, Begin) --> <system-goal><program> Eof #Finish 
(<system-goal>, End) --> 
(<system-goal>, Eof) --> 
(<system-goal>, Id) --> 
(<system-goal>, Int) --> 
(<system-goal>, LParen) --> 
(<system-goal>, Lambda) --> 
(<system-goal>, MinusOp) --> 
(<system-goal>, PlusOp) --> 
(<system-goal>, RParen) --> 
(<system-goal>, Read) --> 
(<system-goal>, LParen) --> 
(<system-goal>, RParen) --> 
(<system-goal>, Semicolon) --> 
(<system-goal>, Write) --> 
(<system-goal>, LParen) --> 
(<system-goal>, RParen) --> 
(<system-goal>, Semicolon) --> 

(<expr>, AssignOp) --> 
(<expr>, Begin) --> 
(<expr>, End) --> 
(<expr>, Eof) --> 
(<expr>, Id) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Int) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Lambda) --> 
(<expr>, MinusOp) --> 
(<expr>, PlusOp) --> 
(<expr>, RParen) --> 
(<expr>, Read) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 
(<expr>, Write) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 

(<stmt-list>, AssignOp) --> 
(<stmt-list>, Begin) --> 
(<stmt-list>, End) --> 
(<stmt-list>, Eof) --> 
(<stmt-list>, Id) --> <stmt-list><stmt> <stmt-tail> 
(<stmt-list>, Int) --> 
(<stmt-list>, LParen) --> 
(<stmt-list>, Lambda) --> 
(<stmt-list>, MinusOp) --> 
(<stmt-list>, PlusOp) --> 
(<stmt-list>, RParen) --> 
(<stmt-list>, Read) --> <stmt-list><stmt> <stmt-tail> 
(<stmt-list>, LParen) --> 
(<stmt-list>, RParen) --> 
(<stmt-list>, Semicolon) --> 
(<stmt-list>, Write) --> <stmt-list><stmt> <stmt-tail> 
(<stmt-list>, LParen) --> 
(<stmt-list>, RParen) --> 
(<stmt-list>, Semicolon) --> 

(<expr>, AssignOp) --> 
(<expr>, Begin) --> 
(<expr>, End) --> 
(<expr>, Eof) --> 
(<expr>, Id) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Int) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Lambda) --> 
(<expr>, MinusOp) --> 
(<expr>, PlusOp) --> 
(<expr>, RParen) --> 
(<expr>, Read) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 
(<expr>, Write) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 

(<ident>, AssignOp) --> 
(<ident>, Begin) --> 
(<ident>, End) --> 
(<ident>, Eof) --> 
(<ident>, Id) --> <ident>Id #ProcessId($$) 
(<ident>, Int) --> 
(<ident>, LParen) --> 
(<ident>, Lambda) --> 
(<ident>, MinusOp) --> 
(<ident>, PlusOp) --> 
(<ident>, RParen) --> 
(<ident>, Read) --> 
(<ident>, LParen) --> 
(<ident>, RParen) --> 
(<ident>, Semicolon) --> 
(<ident>, Write) --> 
(<ident>, LParen) --> 
(<ident>, RParen) --> 
(<ident>, Semicolon) --> 

(<expr>, AssignOp) --> 
(<expr>, Begin) --> 
(<expr>, End) --> 
(<expr>, Eof) --> 
(<expr>, Id) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Int) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, Lambda) --> 
(<expr>, MinusOp) --> 
(<expr>, PlusOp) --> 
(<expr>, RParen) --> 
(<expr>, Read) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 
(<expr>, Write) --> 
(<expr>, LParen) --> <expr><primary> #Copy($1,$2) <primary> #Copy($2,$$) 
(<expr>, RParen) --> 
(<expr>, Semicolon) --> 


----- do Parse ------
------ Init Scanner----
------------Init Parser ----------
-------------LLDriver ----------
(<system-goal>, Begin) predict: "<system-goal>" --> "<program>" "Eof" "#Finish" 
Begin A := 5 ; End Eof                                                                              <system-goal>                                                                                       

(<program>, Begin) predict: "" --> 
Begin A := 5 ; End Eof                                                                              <program> Eof #Finish EOP:0:0:1:2:EOP                                                               

POPPING EOP
