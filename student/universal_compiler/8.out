predict: <system-goal> --> <program> Eof 
Begin Read ( in ) ; out := in + 100 ; Write ( out ) ; End  Eof                                      <system-goal>                                                                                       

predict: <program> --> Begin <stmt-list> End 
Begin Read ( in ) ; out := in + 100 ; Write ( out ) ; End  Eof                                      <program> Eof                                                                                       

match:Begin
Begin Read ( in ) ; out := in + 100 ; Write ( out ) ; End  Eof                                      Begin <stmt-list> End Eof                                                                           
predict: <stmt-list> --> <stmt> <stmt-tail> 
Read ( in ) ; out := in + 100 ; Write ( out ) ; End  Eof                                            <stmt-list> End Eof                                                                                 

predict: <stmt> --> Read LParen <id-list> RParen Semicolon 
Read ( in ) ; out := in + 100 ; Write ( out ) ; End  Eof                                            <stmt> <stmt-tail> End Eof                                                                          

match:Read
Read ( in ) ; out := in + 100 ; Write ( out ) ; End  Eof                                            Read LParen <id-list> RParen Semicolon <stmt-tail> End Eof                                          
match:LParen
LParen in ) ; out := in + 100 ; Write ( out ) ; End  Eof                                            LParen <id-list> RParen Semicolon <stmt-tail> End Eof                                               
predict: <id-list> --> Id <id-tail> 
Id ) ; out := in + 100 ; Write ( out ) ; End  Eof                                                   <id-list> RParen Semicolon <stmt-tail> End Eof                                                      

match:Id
Id ) ; out := in + 100 ; Write ( out ) ; End  Eof                                                   Id <id-tail> RParen Semicolon <stmt-tail> End Eof                                                   
predict: <id-tail> --> Lambda 
RParen ; out := in + 100 ; Write ( out ) ; End  Eof                                                 <id-tail> RParen Semicolon <stmt-tail> End Eof                                                      

match:Lambda
RParen ; out := in + 100 ; Write ( out ) ; End  Eof                                                 Lambda RParen Semicolon <stmt-tail> End Eof                                                         
match:RParen
RParen ; out := in + 100 ; Write ( out ) ; End  Eof                                                 RParen Semicolon <stmt-tail> End Eof                                                                
match:Semicolon
Semicolon out := in + 100 ; Write ( out ) ; End  Eof                                                Semicolon <stmt-tail> End Eof                                                                       
predict: <stmt-tail> --> <stmt-list> 
Id := in + 100 ; Write ( out ) ; End  Eof                                                           <stmt-tail> End Eof                                                                                 

predict: <stmt-list> --> <stmt> <stmt-tail> 
Id := in + 100 ; Write ( out ) ; End  Eof                                                           <stmt-list> End Eof                                                                                 

predict: <stmt> --> Id AssignOp <expr> Semicolon 
Id := in + 100 ; Write ( out ) ; End  Eof                                                           <stmt> <stmt-tail> End Eof                                                                          

match:Id
Id := in + 100 ; Write ( out ) ; End  Eof                                                           Id AssignOp <expr> Semicolon <stmt-tail> End Eof                                                    
match:AssignOp
AssignOp in + 100 ; Write ( out ) ; End  Eof                                                        AssignOp <expr> Semicolon <stmt-tail> End Eof                                                       
predict: <expr> --> <primary> <primary-tail> 
Id + 100 ; Write ( out ) ; End  Eof                                                                 <expr> Semicolon <stmt-tail> End Eof                                                                

predict: <primary> --> Id 
Id + 100 ; Write ( out ) ; End  Eof                                                                 <primary> <primary-tail> Semicolon <stmt-tail> End Eof                                              

match:Id
Id + 100 ; Write ( out ) ; End  Eof                                                                 Id <primary-tail> Semicolon <stmt-tail> End Eof                                                     
predict: <primary-tail> --> <addOp> <expr> 
PlusOp 100 ; Write ( out ) ; End  Eof                                                               <primary-tail> Semicolon <stmt-tail> End Eof                                                        

predict: <addOp> --> PlusOp 
PlusOp 100 ; Write ( out ) ; End  Eof                                                               <addOp> <expr> Semicolon <stmt-tail> End Eof                                                        

match:PlusOp
PlusOp 100 ; Write ( out ) ; End  Eof                                                               PlusOp <expr> Semicolon <stmt-tail> End Eof                                                         
predict: <expr> --> <primary> <primary-tail> 
Int ; Write ( out ) ; End  Eof                                                                      <expr> Semicolon <stmt-tail> End Eof                                                                

predict: <primary> --> Int 
Int ; Write ( out ) ; End  Eof                                                                      <primary> <primary-tail> Semicolon <stmt-tail> End Eof                                              

match:Int
Int ; Write ( out ) ; End  Eof                                                                      Int <primary-tail> Semicolon <stmt-tail> End Eof                                                    
predict: <primary-tail> --> Lambda 
Semicolon Write ( out ) ; End  Eof                                                                  <primary-tail> Semicolon <stmt-tail> End Eof                                                        

match:Lambda
Semicolon Write ( out ) ; End  Eof                                                                  Lambda Semicolon <stmt-tail> End Eof                                                                
match:Semicolon
Semicolon Write ( out ) ; End  Eof                                                                  Semicolon <stmt-tail> End Eof                                                                       
predict: <stmt-tail> --> <stmt-list> 
Write ( out ) ; End  Eof                                                                            <stmt-tail> End Eof                                                                                 

predict: <stmt-list> --> <stmt> <stmt-tail> 
Write ( out ) ; End  Eof                                                                            <stmt-list> End Eof                                                                                 

predict: <stmt> --> Write LParen <expr-list> RParen Semicolon 
Write ( out ) ; End  Eof                                                                            <stmt> <stmt-tail> End Eof                                                                          

match:Write
Write ( out ) ; End  Eof                                                                            Write LParen <expr-list> RParen Semicolon <stmt-tail> End Eof                                       
match:LParen
LParen out ) ; End  Eof                                                                             LParen <expr-list> RParen Semicolon <stmt-tail> End Eof                                             
predict: <expr-list> --> <expr> <expr-tail> 
Id ) ; End  Eof                                                                                     <expr-list> RParen Semicolon <stmt-tail> End Eof                                                    

predict: <expr> --> <primary> <primary-tail> 
Id ) ; End  Eof                                                                                     <expr> <expr-tail> RParen Semicolon <stmt-tail> End Eof                                             

predict: <primary> --> Id 
Id ) ; End  Eof                                                                                     <primary> <primary-tail> <expr-tail> RParen Semicolon <stmt-tail> End Eof                           

match:Id
Id ) ; End  Eof                                                                                     Id <primary-tail> <expr-tail> RParen Semicolon <stmt-tail> End Eof                                  
predict: <primary-tail> --> Lambda 
RParen ; End  Eof                                                                                   <primary-tail> <expr-tail> RParen Semicolon <stmt-tail> End Eof                                     

match:Lambda
RParen ; End  Eof                                                                                   Lambda <expr-tail> RParen Semicolon <stmt-tail> End Eof                                             
predict: <expr-tail> --> Lambda 
RParen ; End  Eof                                                                                   <expr-tail> RParen Semicolon <stmt-tail> End Eof                                                    

match:Lambda
RParen ; End  Eof                                                                                   Lambda RParen Semicolon <stmt-tail> End Eof                                                         
match:RParen
RParen ; End  Eof                                                                                   RParen Semicolon <stmt-tail> End Eof                                                                
match:Semicolon
Semicolon End  Eof                                                                                  Semicolon <stmt-tail> End Eof                                                                       
predict: <stmt-tail> --> Lambda 
End  Eof                                                                                            <stmt-tail> End Eof                                                                                 

match:Lambda
End  Eof                                                                                            Lambda End Eof                                                                                      
match:End
End  Eof                                                                                            End Eof                                                                                             
syntax error 2  X:Eof a: End
parse stack: Eof 
