
------------------------------------>
-1, -1, 0, 1
Token: Begin A := 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <system-goal> 
Semantic (r-l): 0:<system-goal>("", 0)
<------------------------------------


------------------------------------>
0, 1, 1, 3
Token: Begin A := 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <program> Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)
<------------------------------------


------------------------------------>
1, 3, 3, 6
Token: Begin A := 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)
<------------------------------------


------------------------------------>
1, 3, 4, 6
Token: Id := 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)
<------------------------------------


------------------------------------>
4, 6, 6, 8
Token: Id := 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
6, 8, 8, 12
Token: Id := 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp("", 0)10:<expr>("", 0)11:Semicolon("", 0)
<------------------------------------


------------------------------------>
8, 12, 12, 13
Token: Id := 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:6:8:8:12:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp("", 0)10:<expr>("", 0)11:Semicolon("", 0)12:Id("A", 0)
<------------------------------------

SymbolTable::enter(): hash value=1 symbol: A ...starting new
INSTR: (Declare,	A_1,	Integer)

------------------------------------>
6, 8, 9, 12
Token: AssignOp 0 ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("A_1", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)
<------------------------------------


------------------------------------>
6, 8, 10, 12
Token: Int ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("A_1", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)
<------------------------------------


------------------------------------>
10, 12, 12, 14
Token: Int ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("A_1", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
12, 14, 14, 15
Token: Int ; B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:10:12:12:14:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("A_1", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)14:Int("0", 0)
<------------------------------------


------------------------------------>
10, 12, 13, 14
Token: Semicolon B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("A_1", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("0", 0)13:<primary-tail>("0", 0)
<------------------------------------


------------------------------------>
13, 14, 14, 15
Token: Semicolon B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:10:12:13:14:EOP #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("A_1", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("0", 0)13:<primary-tail>("0", 0)14:Lambda("", 0)
<------------------------------------


------------------------------------>
6, 8, 11, 12
Token: Semicolon B := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("A_1", 0)9:AssignOp(":=", 0)10:<expr>("0", 0)11:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	A_1,	0)

------------------------------------>
4, 6, 7, 8
Token: Id := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
7, 8, 8, 9
Token: Id := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
8, 9, 9, 11
Token: Id := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
9, 11, 11, 15
Token: Id := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("", 0)12:AssignOp("", 0)13:<expr>("", 0)14:Semicolon("", 0)
<------------------------------------


------------------------------------>
11, 15, 15, 16
Token: Id := 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:9:11:11:15:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("", 0)12:AssignOp("", 0)13:<expr>("", 0)14:Semicolon("", 0)15:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1
SymbolTable::enter(): hash value=1 symbol: B ...adding on
INSTR: (Declare,	B_1,	Integer)

------------------------------------>
9, 11, 12, 15
Token: AssignOp 0 ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("B_1", 0)12:AssignOp(":=", 0)13:<expr>("", 0)14:Semicolon("", 0)
<------------------------------------


------------------------------------>
9, 11, 13, 15
Token: Int ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("B_1", 0)12:AssignOp(":=", 0)13:<expr>("", 0)14:Semicolon("", 0)
<------------------------------------


------------------------------------>
13, 15, 15, 17
Token: Int ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:9:11:13:15:EOP Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("B_1", 0)12:AssignOp(":=", 0)13:<expr>("", 0)14:Semicolon("", 0)15:<primary>("", 0)16:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
15, 17, 17, 18
Token: Int ; C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:13:15:15:17:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:9:11:13:15:EOP Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("B_1", 0)12:AssignOp(":=", 0)13:<expr>("", 0)14:Semicolon("", 0)15:<primary>("", 0)16:<primary-tail>("", 0)17:Int("0", 0)
<------------------------------------


------------------------------------>
13, 15, 16, 17
Token: Semicolon C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:9:11:13:15:EOP Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("B_1", 0)12:AssignOp(":=", 0)13:<expr>("", 0)14:Semicolon("", 0)15:<primary>("0", 0)16:<primary-tail>("0", 0)
<------------------------------------


------------------------------------>
16, 17, 17, 18
Token: Semicolon C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:13:15:16:17:EOP #Copy($2,$$) EOP:9:11:13:15:EOP Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("B_1", 0)12:AssignOp(":=", 0)13:<expr>("", 0)14:Semicolon("", 0)15:<primary>("0", 0)16:<primary-tail>("0", 0)17:Lambda("", 0)
<------------------------------------


------------------------------------>
9, 11, 14, 15
Token: Semicolon C := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:8:9:9:11:EOP <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<ident>("B_1", 0)12:AssignOp(":=", 0)13:<expr>("0", 0)14:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	B_1,	0)

------------------------------------>
8, 9, 10, 11
Token: Id := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
10, 11, 11, 12
Token: Id := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
11, 12, 12, 14
Token: Id := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
12, 14, 14, 18
Token: Id := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("", 0)15:AssignOp("", 0)16:<expr>("", 0)17:Semicolon("", 0)
<------------------------------------


------------------------------------>
14, 18, 18, 19
Token: Id := 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:12:14:14:18:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("", 0)15:AssignOp("", 0)16:<expr>("", 0)17:Semicolon("", 0)18:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1
SymbolTable::enter(): hash value=1 symbol: C ...adding on
INSTR: (Declare,	C_1,	Integer)

------------------------------------>
12, 14, 15, 18
Token: AssignOp 0 ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("C_1", 0)15:AssignOp(":=", 0)16:<expr>("", 0)17:Semicolon("", 0)
<------------------------------------


------------------------------------>
12, 14, 16, 18
Token: Int ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("C_1", 0)15:AssignOp(":=", 0)16:<expr>("", 0)17:Semicolon("", 0)
<------------------------------------


------------------------------------>
16, 18, 18, 20
Token: Int ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:12:14:16:18:EOP Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("C_1", 0)15:AssignOp(":=", 0)16:<expr>("", 0)17:Semicolon("", 0)18:<primary>("", 0)19:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
18, 20, 20, 21
Token: Int ; D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:16:18:18:20:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:12:14:16:18:EOP Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("C_1", 0)15:AssignOp(":=", 0)16:<expr>("", 0)17:Semicolon("", 0)18:<primary>("", 0)19:<primary-tail>("", 0)20:Int("0", 0)
<------------------------------------


------------------------------------>
16, 18, 19, 20
Token: Semicolon D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:12:14:16:18:EOP Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("C_1", 0)15:AssignOp(":=", 0)16:<expr>("", 0)17:Semicolon("", 0)18:<primary>("0", 0)19:<primary-tail>("0", 0)
<------------------------------------


------------------------------------>
19, 20, 20, 21
Token: Semicolon D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:16:18:19:20:EOP #Copy($2,$$) EOP:12:14:16:18:EOP Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("C_1", 0)15:AssignOp(":=", 0)16:<expr>("", 0)17:Semicolon("", 0)18:<primary>("0", 0)19:<primary-tail>("0", 0)20:Lambda("", 0)
<------------------------------------


------------------------------------>
12, 14, 17, 18
Token: Semicolon D := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:11:12:12:14:EOP <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<ident>("C_1", 0)15:AssignOp(":=", 0)16:<expr>("0", 0)17:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	C_1,	0)

------------------------------------>
11, 12, 13, 14
Token: Id := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
13, 14, 14, 15
Token: Id := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
14, 15, 15, 17
Token: Id := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
15, 17, 17, 21
Token: Id := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("", 0)18:AssignOp("", 0)19:<expr>("", 0)20:Semicolon("", 0)
<------------------------------------


------------------------------------>
17, 21, 21, 22
Token: Id := 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:15:17:17:21:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("", 0)18:AssignOp("", 0)19:<expr>("", 0)20:Semicolon("", 0)21:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1
SymbolTable::enter(): hash value=1 symbol: D ...adding on
INSTR: (Declare,	D_1,	Integer)

------------------------------------>
15, 17, 18, 21
Token: AssignOp 0 ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("D_1", 0)18:AssignOp(":=", 0)19:<expr>("", 0)20:Semicolon("", 0)
<------------------------------------


------------------------------------>
15, 17, 19, 21
Token: Int ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("D_1", 0)18:AssignOp(":=", 0)19:<expr>("", 0)20:Semicolon("", 0)
<------------------------------------


------------------------------------>
19, 21, 21, 23
Token: Int ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:15:17:19:21:EOP Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("D_1", 0)18:AssignOp(":=", 0)19:<expr>("", 0)20:Semicolon("", 0)21:<primary>("", 0)22:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
21, 23, 23, 24
Token: Int ; E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:19:21:21:23:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:15:17:19:21:EOP Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("D_1", 0)18:AssignOp(":=", 0)19:<expr>("", 0)20:Semicolon("", 0)21:<primary>("", 0)22:<primary-tail>("", 0)23:Int("0", 0)
<------------------------------------


------------------------------------>
19, 21, 22, 23
Token: Semicolon E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:15:17:19:21:EOP Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("D_1", 0)18:AssignOp(":=", 0)19:<expr>("", 0)20:Semicolon("", 0)21:<primary>("0", 0)22:<primary-tail>("0", 0)
<------------------------------------


------------------------------------>
22, 23, 23, 24
Token: Semicolon E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:19:21:22:23:EOP #Copy($2,$$) EOP:15:17:19:21:EOP Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("D_1", 0)18:AssignOp(":=", 0)19:<expr>("", 0)20:Semicolon("", 0)21:<primary>("0", 0)22:<primary-tail>("0", 0)23:Lambda("", 0)
<------------------------------------


------------------------------------>
15, 17, 20, 21
Token: Semicolon E := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:14:15:15:17:EOP <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<ident>("D_1", 0)18:AssignOp(":=", 0)19:<expr>("0", 0)20:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	D_1,	0)

------------------------------------>
14, 15, 16, 17
Token: Id := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
16, 17, 17, 18
Token: Id := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
17, 18, 18, 20
Token: Id := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
18, 20, 20, 24
Token: Id := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("", 0)21:AssignOp("", 0)22:<expr>("", 0)23:Semicolon("", 0)
<------------------------------------


------------------------------------>
20, 24, 24, 25
Token: Id := 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:18:20:20:24:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("", 0)21:AssignOp("", 0)22:<expr>("", 0)23:Semicolon("", 0)24:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1
SymbolTable::enter(): hash value=1 symbol: E ...adding on
INSTR: (Declare,	E_1,	Integer)

------------------------------------>
18, 20, 21, 24
Token: AssignOp 0 ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("E_1", 0)21:AssignOp(":=", 0)22:<expr>("", 0)23:Semicolon("", 0)
<------------------------------------


------------------------------------>
18, 20, 22, 24
Token: Int ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("E_1", 0)21:AssignOp(":=", 0)22:<expr>("", 0)23:Semicolon("", 0)
<------------------------------------


------------------------------------>
22, 24, 24, 26
Token: Int ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:18:20:22:24:EOP Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("E_1", 0)21:AssignOp(":=", 0)22:<expr>("", 0)23:Semicolon("", 0)24:<primary>("", 0)25:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
24, 26, 26, 27
Token: Int ; F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:22:24:24:26:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:18:20:22:24:EOP Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("E_1", 0)21:AssignOp(":=", 0)22:<expr>("", 0)23:Semicolon("", 0)24:<primary>("", 0)25:<primary-tail>("", 0)26:Int("0", 0)
<------------------------------------


------------------------------------>
22, 24, 25, 26
Token: Semicolon F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:18:20:22:24:EOP Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("E_1", 0)21:AssignOp(":=", 0)22:<expr>("", 0)23:Semicolon("", 0)24:<primary>("0", 0)25:<primary-tail>("0", 0)
<------------------------------------


------------------------------------>
25, 26, 26, 27
Token: Semicolon F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:22:24:25:26:EOP #Copy($2,$$) EOP:18:20:22:24:EOP Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("E_1", 0)21:AssignOp(":=", 0)22:<expr>("", 0)23:Semicolon("", 0)24:<primary>("0", 0)25:<primary-tail>("0", 0)26:Lambda("", 0)
<------------------------------------


------------------------------------>
18, 20, 23, 24
Token: Semicolon F := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:17:18:18:20:EOP <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<ident>("E_1", 0)21:AssignOp(":=", 0)22:<expr>("0", 0)23:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	E_1,	0)

------------------------------------>
17, 18, 19, 20
Token: Id := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
19, 20, 20, 21
Token: Id := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
20, 21, 21, 23
Token: Id := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
21, 23, 23, 27
Token: Id := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("", 0)24:AssignOp("", 0)25:<expr>("", 0)26:Semicolon("", 0)
<------------------------------------


------------------------------------>
23, 27, 27, 28
Token: Id := 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:21:23:23:27:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("", 0)24:AssignOp("", 0)25:<expr>("", 0)26:Semicolon("", 0)27:Id("F", 0)
<------------------------------------

SymbolTable::finding F in scope: 1
SymbolTable::enter(): hash value=1 symbol: F ...adding on
extending...
INSTR: (Declare,	F_1,	Integer)

------------------------------------>
21, 23, 24, 27
Token: AssignOp 0 ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("F_1", 0)24:AssignOp(":=", 0)25:<expr>("", 0)26:Semicolon("", 0)
<------------------------------------


------------------------------------>
21, 23, 25, 27
Token: Int ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("F_1", 0)24:AssignOp(":=", 0)25:<expr>("", 0)26:Semicolon("", 0)
<------------------------------------


------------------------------------>
25, 27, 27, 29
Token: Int ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:21:23:25:27:EOP Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("F_1", 0)24:AssignOp(":=", 0)25:<expr>("", 0)26:Semicolon("", 0)27:<primary>("", 0)28:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
27, 29, 29, 30
Token: Int ; Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:25:27:27:29:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:21:23:25:27:EOP Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("F_1", 0)24:AssignOp(":=", 0)25:<expr>("", 0)26:Semicolon("", 0)27:<primary>("", 0)28:<primary-tail>("", 0)29:Int("0", 0)
<------------------------------------


------------------------------------>
25, 27, 28, 29
Token: Semicolon Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:21:23:25:27:EOP Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("F_1", 0)24:AssignOp(":=", 0)25:<expr>("", 0)26:Semicolon("", 0)27:<primary>("0", 0)28:<primary-tail>("0", 0)
<------------------------------------


------------------------------------>
28, 29, 29, 30
Token: Semicolon Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:25:27:28:29:EOP #Copy($2,$$) EOP:21:23:25:27:EOP Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("F_1", 0)24:AssignOp(":=", 0)25:<expr>("", 0)26:Semicolon("", 0)27:<primary>("0", 0)28:<primary-tail>("0", 0)29:Lambda("", 0)
<------------------------------------


------------------------------------>
21, 23, 26, 27
Token: Semicolon Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:20:21:21:23:EOP <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<ident>("F_1", 0)24:AssignOp(":=", 0)25:<expr>("0", 0)26:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	F_1,	0)

------------------------------------>
20, 21, 22, 23
Token: Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
22, 23, 23, 24
Token: Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
23, 24, 24, 26
Token: Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <scope> <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
24, 26, 26, 29
Token: Begin B := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)
<------------------------------------


------------------------------------>
24, 26, 27, 29
Token: Id := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)
<------------------------------------


------------------------------------>
27, 29, 29, 31
Token: Id := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
29, 31, 31, 35
Token: Id := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("", 0)32:AssignOp("", 0)33:<expr>("", 0)34:Semicolon("", 0)
<------------------------------------


------------------------------------>
31, 35, 35, 36
Token: Id := 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:29:31:31:35:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("", 0)32:AssignOp("", 0)33:<expr>("", 0)34:Semicolon("", 0)35:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1

------------------------------------>
29, 31, 32, 35
Token: AssignOp 5 + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)
<------------------------------------


------------------------------------>
29, 31, 33, 35
Token: Int + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)
<------------------------------------


------------------------------------>
33, 35, 35, 37
Token: Int + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("", 0)36:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
35, 37, 37, 38
Token: Int + A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:33:35:35:37:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("", 0)36:<primary-tail>("", 0)37:Int("5", 0)
<------------------------------------


------------------------------------>
33, 35, 36, 37
Token: PlusOp A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)
<------------------------------------


------------------------------------>
36, 37, 37, 39
Token: PlusOp A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <addOp> <expr> #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("", 0)38:<expr>("", 0)
<------------------------------------


------------------------------------>
37, 39, 39, 40
Token: PlusOp A ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): PlusOp #ProcessOp($$) EOP:36:37:37:39:EOP <expr> #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("", 0)38:<expr>("", 0)39:PlusOp("PlusOp", 0)
<------------------------------------

found #ProcessOp

------------------------------------>
36, 37, 38, 39
Token: Id ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("PlusOp", 0)38:<expr>("", 0)
<------------------------------------


------------------------------------>
38, 39, 39, 41
Token: Id ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:36:37:38:39:EOP #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("PlusOp", 0)38:<expr>("", 0)39:<primary>("", 0)40:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
39, 41, 41, 42
Token: Id ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:38:39:39:41:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:36:37:38:39:EOP #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("PlusOp", 0)38:<expr>("", 0)39:<primary>("", 0)40:<primary-tail>("", 0)41:<ident>("", 0)
<------------------------------------


------------------------------------>
41, 42, 42, 43
Token: Id ; Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:39:41:41:42:EOP #Copy($1,$$) EOP:38:39:39:41:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:36:37:38:39:EOP #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("PlusOp", 0)38:<expr>("", 0)39:<primary>("", 0)40:<primary-tail>("", 0)41:<ident>("", 0)42:Id("A", 0)
<------------------------------------

SymbolTable::finding A in scope: 1

------------------------------------>
38, 39, 40, 41
Token: Semicolon Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:36:37:38:39:EOP #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("PlusOp", 0)38:<expr>("", 0)39:<primary>("A_1", 0)40:<primary-tail>("A_1", 0)
<------------------------------------


------------------------------------>
40, 41, 41, 42
Token: Semicolon Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:38:39:40:41:EOP #Copy($2,$$) EOP:36:37:38:39:EOP #GenInfix($$,$1,$2,$$) EOP:33:35:36:37:EOP #Copy($2,$$) EOP:29:31:33:35:EOP Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("", 0)34:Semicolon("", 0)35:<primary>("5", 0)36:<primary-tail>("5", 0)37:<addOp>("PlusOp", 0)38:<expr>("", 0)39:<primary>("A_1", 0)40:<primary-tail>("A_1", 0)41:Lambda("", 0)
<------------------------------------

INSTR: (PlusOp,	5,	A_1,	temp_0)

------------------------------------>
29, 31, 34, 35
Token: Semicolon Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:27:29:29:31:EOP <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<ident>("B_1", 0)32:AssignOp(":=", 0)33:<expr>("temp_0", 0)34:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	B_1,	temp_0)

------------------------------------>
27, 29, 30, 31
Token: Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
30, 31, 31, 32
Token: Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
31, 32, 32, 34
Token: Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <scope> <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
32, 34, 34, 37
Token: Begin C := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)
<------------------------------------


------------------------------------>
32, 34, 35, 37
Token: Id := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)
<------------------------------------


------------------------------------>
35, 37, 37, 39
Token: Id := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
37, 39, 39, 43
Token: Id := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("", 0)40:AssignOp("", 0)41:<expr>("", 0)42:Semicolon("", 0)
<------------------------------------


------------------------------------>
39, 43, 43, 44
Token: Id := 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:37:39:39:43:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("", 0)40:AssignOp("", 0)41:<expr>("", 0)42:Semicolon("", 0)43:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1

------------------------------------>
37, 39, 40, 43
Token: AssignOp 4 + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)
<------------------------------------


------------------------------------>
37, 39, 41, 43
Token: Int + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)
<------------------------------------


------------------------------------>
41, 43, 43, 45
Token: Int + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("", 0)44:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
43, 45, 45, 46
Token: Int + B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:41:43:43:45:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("", 0)44:<primary-tail>("", 0)45:Int("4", 0)
<------------------------------------


------------------------------------>
41, 43, 44, 45
Token: PlusOp B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)
<------------------------------------


------------------------------------>
44, 45, 45, 47
Token: PlusOp B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <addOp> <expr> #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("", 0)46:<expr>("", 0)
<------------------------------------


------------------------------------>
45, 47, 47, 48
Token: PlusOp B ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): PlusOp #ProcessOp($$) EOP:44:45:45:47:EOP <expr> #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("", 0)46:<expr>("", 0)47:PlusOp("PlusOp", 0)
<------------------------------------

found #ProcessOp

------------------------------------>
44, 45, 46, 47
Token: Id ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("PlusOp", 0)46:<expr>("", 0)
<------------------------------------


------------------------------------>
46, 47, 47, 49
Token: Id ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:44:45:46:47:EOP #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("PlusOp", 0)46:<expr>("", 0)47:<primary>("", 0)48:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
47, 49, 49, 50
Token: Id ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:46:47:47:49:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:44:45:46:47:EOP #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("PlusOp", 0)46:<expr>("", 0)47:<primary>("", 0)48:<primary-tail>("", 0)49:<ident>("", 0)
<------------------------------------


------------------------------------>
49, 50, 50, 51
Token: Id ; Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:47:49:49:50:EOP #Copy($1,$$) EOP:46:47:47:49:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:44:45:46:47:EOP #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("PlusOp", 0)46:<expr>("", 0)47:<primary>("", 0)48:<primary-tail>("", 0)49:<ident>("", 0)50:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1

------------------------------------>
46, 47, 48, 49
Token: Semicolon Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:44:45:46:47:EOP #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("PlusOp", 0)46:<expr>("", 0)47:<primary>("B_1", 0)48:<primary-tail>("B_1", 0)
<------------------------------------


------------------------------------>
48, 49, 49, 50
Token: Semicolon Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:46:47:48:49:EOP #Copy($2,$$) EOP:44:45:46:47:EOP #GenInfix($$,$1,$2,$$) EOP:41:43:44:45:EOP #Copy($2,$$) EOP:37:39:41:43:EOP Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("", 0)42:Semicolon("", 0)43:<primary>("4", 0)44:<primary-tail>("4", 0)45:<addOp>("PlusOp", 0)46:<expr>("", 0)47:<primary>("B_1", 0)48:<primary-tail>("B_1", 0)49:Lambda("", 0)
<------------------------------------

INSTR: (PlusOp,	4,	B_1,	temp_1)

------------------------------------>
37, 39, 42, 43
Token: Semicolon Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:35:37:37:39:EOP <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<ident>("C_1", 0)40:AssignOp(":=", 0)41:<expr>("temp_1", 0)42:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	C_1,	temp_1)

------------------------------------>
35, 37, 38, 39
Token: Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
38, 39, 39, 40
Token: Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
39, 40, 40, 42
Token: Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <scope> <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
40, 42, 42, 45
Token: Begin D := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)
<------------------------------------


------------------------------------>
40, 42, 43, 45
Token: Id := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)
<------------------------------------


------------------------------------>
43, 45, 45, 47
Token: Id := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
45, 47, 47, 51
Token: Id := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("", 0)48:AssignOp("", 0)49:<expr>("", 0)50:Semicolon("", 0)
<------------------------------------


------------------------------------>
47, 51, 51, 52
Token: Id := 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:45:47:47:51:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("", 0)48:AssignOp("", 0)49:<expr>("", 0)50:Semicolon("", 0)51:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1

------------------------------------>
45, 47, 48, 51
Token: AssignOp 3 + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)
<------------------------------------


------------------------------------>
45, 47, 49, 51
Token: Int + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)
<------------------------------------


------------------------------------>
49, 51, 51, 53
Token: Int + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("", 0)52:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
51, 53, 53, 54
Token: Int + C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:49:51:51:53:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("", 0)52:<primary-tail>("", 0)53:Int("3", 0)
<------------------------------------


------------------------------------>
49, 51, 52, 53
Token: PlusOp C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)
<------------------------------------


------------------------------------>
52, 53, 53, 55
Token: PlusOp C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <addOp> <expr> #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("", 0)54:<expr>("", 0)
<------------------------------------


------------------------------------>
53, 55, 55, 56
Token: PlusOp C ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): PlusOp #ProcessOp($$) EOP:52:53:53:55:EOP <expr> #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("", 0)54:<expr>("", 0)55:PlusOp("PlusOp", 0)
<------------------------------------

found #ProcessOp

------------------------------------>
52, 53, 54, 55
Token: Id ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("PlusOp", 0)54:<expr>("", 0)
<------------------------------------


------------------------------------>
54, 55, 55, 57
Token: Id ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:52:53:54:55:EOP #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("PlusOp", 0)54:<expr>("", 0)55:<primary>("", 0)56:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
55, 57, 57, 58
Token: Id ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:54:55:55:57:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:52:53:54:55:EOP #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("PlusOp", 0)54:<expr>("", 0)55:<primary>("", 0)56:<primary-tail>("", 0)57:<ident>("", 0)
<------------------------------------


------------------------------------>
57, 58, 58, 59
Token: Id ; Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:55:57:57:58:EOP #Copy($1,$$) EOP:54:55:55:57:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:52:53:54:55:EOP #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("PlusOp", 0)54:<expr>("", 0)55:<primary>("", 0)56:<primary-tail>("", 0)57:<ident>("", 0)58:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1

------------------------------------>
54, 55, 56, 57
Token: Semicolon Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:52:53:54:55:EOP #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("PlusOp", 0)54:<expr>("", 0)55:<primary>("C_1", 0)56:<primary-tail>("C_1", 0)
<------------------------------------


------------------------------------>
56, 57, 57, 58
Token: Semicolon Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:54:55:56:57:EOP #Copy($2,$$) EOP:52:53:54:55:EOP #GenInfix($$,$1,$2,$$) EOP:49:51:52:53:EOP #Copy($2,$$) EOP:45:47:49:51:EOP Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("", 0)50:Semicolon("", 0)51:<primary>("3", 0)52:<primary-tail>("3", 0)53:<addOp>("PlusOp", 0)54:<expr>("", 0)55:<primary>("C_1", 0)56:<primary-tail>("C_1", 0)57:Lambda("", 0)
<------------------------------------

INSTR: (PlusOp,	3,	C_1,	temp_2)

------------------------------------>
45, 47, 50, 51
Token: Semicolon Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:43:45:45:47:EOP <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<ident>("D_1", 0)48:AssignOp(":=", 0)49:<expr>("temp_2", 0)50:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	D_1,	temp_2)

------------------------------------>
43, 45, 46, 47
Token: Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
46, 47, 47, 48
Token: Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
47, 48, 48, 50
Token: Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <scope> <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
48, 50, 50, 53
Token: Begin E := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)
<------------------------------------


------------------------------------>
48, 50, 51, 53
Token: Id := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)
<------------------------------------


------------------------------------>
51, 53, 53, 55
Token: Id := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
53, 55, 55, 59
Token: Id := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("", 0)56:AssignOp("", 0)57:<expr>("", 0)58:Semicolon("", 0)
<------------------------------------


------------------------------------>
55, 59, 59, 60
Token: Id := 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:53:55:55:59:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("", 0)56:AssignOp("", 0)57:<expr>("", 0)58:Semicolon("", 0)59:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1

------------------------------------>
53, 55, 56, 59
Token: AssignOp 2 + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)
<------------------------------------


------------------------------------>
53, 55, 57, 59
Token: Int + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)
<------------------------------------


------------------------------------>
57, 59, 59, 61
Token: Int + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("", 0)60:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
59, 61, 61, 62
Token: Int + D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:57:59:59:61:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("", 0)60:<primary-tail>("", 0)61:Int("2", 0)
<------------------------------------


------------------------------------>
57, 59, 60, 61
Token: PlusOp D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)
<------------------------------------


------------------------------------>
60, 61, 61, 63
Token: PlusOp D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <addOp> <expr> #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("", 0)62:<expr>("", 0)
<------------------------------------


------------------------------------>
61, 63, 63, 64
Token: PlusOp D ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): PlusOp #ProcessOp($$) EOP:60:61:61:63:EOP <expr> #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("", 0)62:<expr>("", 0)63:PlusOp("PlusOp", 0)
<------------------------------------

found #ProcessOp

------------------------------------>
60, 61, 62, 63
Token: Id ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("PlusOp", 0)62:<expr>("", 0)
<------------------------------------


------------------------------------>
62, 63, 63, 65
Token: Id ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:60:61:62:63:EOP #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("PlusOp", 0)62:<expr>("", 0)63:<primary>("", 0)64:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
63, 65, 65, 66
Token: Id ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:62:63:63:65:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:60:61:62:63:EOP #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("PlusOp", 0)62:<expr>("", 0)63:<primary>("", 0)64:<primary-tail>("", 0)65:<ident>("", 0)
<------------------------------------


------------------------------------>
65, 66, 66, 67
Token: Id ; Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:63:65:65:66:EOP #Copy($1,$$) EOP:62:63:63:65:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:60:61:62:63:EOP #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("PlusOp", 0)62:<expr>("", 0)63:<primary>("", 0)64:<primary-tail>("", 0)65:<ident>("", 0)66:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1

------------------------------------>
62, 63, 64, 65
Token: Semicolon Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:60:61:62:63:EOP #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("PlusOp", 0)62:<expr>("", 0)63:<primary>("D_1", 0)64:<primary-tail>("D_1", 0)
<------------------------------------


------------------------------------>
64, 65, 65, 66
Token: Semicolon Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:62:63:64:65:EOP #Copy($2,$$) EOP:60:61:62:63:EOP #GenInfix($$,$1,$2,$$) EOP:57:59:60:61:EOP #Copy($2,$$) EOP:53:55:57:59:EOP Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("", 0)58:Semicolon("", 0)59:<primary>("2", 0)60:<primary-tail>("2", 0)61:<addOp>("PlusOp", 0)62:<expr>("", 0)63:<primary>("D_1", 0)64:<primary-tail>("D_1", 0)65:Lambda("", 0)
<------------------------------------

INSTR: (PlusOp,	2,	D_1,	temp_3)

------------------------------------>
53, 55, 58, 59
Token: Semicolon Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:51:53:53:55:EOP <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<ident>("E_1", 0)56:AssignOp(":=", 0)57:<expr>("temp_3", 0)58:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	E_1,	temp_3)

------------------------------------>
51, 53, 54, 55
Token: Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
54, 55, 55, 56
Token: Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
55, 56, 56, 58
Token: Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <scope> <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
56, 58, 58, 61
Token: Begin F := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Begin #Begin <stmt-list> End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)
<------------------------------------


------------------------------------>
56, 58, 59, 61
Token: Id := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)
<------------------------------------


------------------------------------>
59, 61, 61, 63
Token: Id := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
61, 63, 63, 67
Token: Id := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("", 0)64:AssignOp("", 0)65:<expr>("", 0)66:Semicolon("", 0)
<------------------------------------


------------------------------------>
63, 67, 67, 68
Token: Id := 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:61:63:63:67:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("", 0)64:AssignOp("", 0)65:<expr>("", 0)66:Semicolon("", 0)67:Id("F", 0)
<------------------------------------

SymbolTable::finding F in scope: 1

------------------------------------>
61, 63, 64, 67
Token: AssignOp 1 + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)
<------------------------------------


------------------------------------>
61, 63, 65, 67
Token: Int + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)
<------------------------------------


------------------------------------>
65, 67, 67, 69
Token: Int + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("", 0)68:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
67, 69, 69, 70
Token: Int + E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:65:67:67:69:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("", 0)68:<primary-tail>("", 0)69:Int("1", 0)
<------------------------------------


------------------------------------>
65, 67, 68, 69
Token: PlusOp E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
68, 69, 69, 71
Token: PlusOp E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <addOp> <expr> #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("", 0)70:<expr>("", 0)
<------------------------------------


------------------------------------>
69, 71, 71, 72
Token: PlusOp E ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): PlusOp #ProcessOp($$) EOP:68:69:69:71:EOP <expr> #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("", 0)70:<expr>("", 0)71:PlusOp("PlusOp", 0)
<------------------------------------

found #ProcessOp

------------------------------------>
68, 69, 70, 71
Token: Id ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("PlusOp", 0)70:<expr>("", 0)
<------------------------------------


------------------------------------>
70, 71, 71, 73
Token: Id ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:68:69:70:71:EOP #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("PlusOp", 0)70:<expr>("", 0)71:<primary>("", 0)72:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
71, 73, 73, 74
Token: Id ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:70:71:71:73:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:68:69:70:71:EOP #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("PlusOp", 0)70:<expr>("", 0)71:<primary>("", 0)72:<primary-tail>("", 0)73:<ident>("", 0)
<------------------------------------


------------------------------------>
73, 74, 74, 75
Token: Id ; Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:71:73:73:74:EOP #Copy($1,$$) EOP:70:71:71:73:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:68:69:70:71:EOP #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("PlusOp", 0)70:<expr>("", 0)71:<primary>("", 0)72:<primary-tail>("", 0)73:<ident>("", 0)74:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1

------------------------------------>
70, 71, 72, 73
Token: Semicolon Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:68:69:70:71:EOP #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("PlusOp", 0)70:<expr>("", 0)71:<primary>("E_1", 0)72:<primary-tail>("E_1", 0)
<------------------------------------


------------------------------------>
72, 73, 73, 74
Token: Semicolon Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:70:71:72:73:EOP #Copy($2,$$) EOP:68:69:70:71:EOP #GenInfix($$,$1,$2,$$) EOP:65:67:68:69:EOP #Copy($2,$$) EOP:61:63:65:67:EOP Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("", 0)66:Semicolon("", 0)67:<primary>("1", 0)68:<primary-tail>("1", 0)69:<addOp>("PlusOp", 0)70:<expr>("", 0)71:<primary>("E_1", 0)72:<primary-tail>("E_1", 0)73:Lambda("", 0)
<------------------------------------

INSTR: (PlusOp,	1,	E_1,	temp_4)

------------------------------------>
61, 63, 66, 67
Token: Semicolon Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:59:61:61:63:EOP <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<ident>("F_1", 0)64:AssignOp(":=", 0)65:<expr>("temp_4", 0)66:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	F_1,	temp_4)

------------------------------------>
59, 61, 62, 63
Token: Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
62, 63, 63, 64
Token: Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
63, 64, 64, 66
Token: Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
64, 66, 66, 71
Token: Write ( A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Write LParen <expr-list> RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)
<------------------------------------


------------------------------------>
64, 66, 67, 71
Token: LParen A , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): LParen <expr-list> RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)
<------------------------------------


------------------------------------>
64, 66, 68, 71
Token: Id , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)
<------------------------------------


------------------------------------>
68, 71, 71, 73
Token: Id , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("", 0)72:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
71, 73, 73, 75
Token: Id , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:68:71:71:73:EOP #WriteExpr($1) <expr-tail> EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("", 0)72:<expr-tail>("", 0)73:<primary>("", 0)74:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
73, 75, 75, 76
Token: Id , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:71:73:73:75:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:68:71:71:73:EOP #WriteExpr($1) <expr-tail> EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("", 0)72:<expr-tail>("", 0)73:<primary>("", 0)74:<primary-tail>("", 0)75:<ident>("", 0)
<------------------------------------


------------------------------------>
75, 76, 76, 77
Token: Id , B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:73:75:75:76:EOP #Copy($1,$$) EOP:71:73:73:75:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:68:71:71:73:EOP #WriteExpr($1) <expr-tail> EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("", 0)72:<expr-tail>("", 0)73:<primary>("", 0)74:<primary-tail>("", 0)75:<ident>("", 0)76:Id("A", 0)
<------------------------------------

SymbolTable::finding A in scope: 1

------------------------------------>
71, 73, 74, 75
Token: Comma B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:68:71:71:73:EOP #WriteExpr($1) <expr-tail> EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("", 0)72:<expr-tail>("", 0)73:<primary>("A_1", 0)74:<primary-tail>("A_1", 0)
<------------------------------------


------------------------------------>
74, 75, 75, 76
Token: Comma B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:71:73:74:75:EOP #Copy($2,$$) EOP:68:71:71:73:EOP #WriteExpr($1) <expr-tail> EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("", 0)72:<expr-tail>("", 0)73:<primary>("A_1", 0)74:<primary-tail>("A_1", 0)75:Lambda("", 0)
<------------------------------------

INSTR: (Write,	A_1,	Integer)

------------------------------------>
68, 71, 72, 73
Token: Comma B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
72, 73, 73, 75
Token: Comma B , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)
<------------------------------------


------------------------------------>
72, 73, 74, 75
Token: Id , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)
<------------------------------------


------------------------------------>
74, 75, 75, 77
Token: Id , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("", 0)76:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
75, 77, 77, 79
Token: Id , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:74:75:75:77:EOP #WriteExpr($1) <expr-tail> EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("", 0)76:<expr-tail>("", 0)77:<primary>("", 0)78:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
77, 79, 79, 80
Token: Id , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:75:77:77:79:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:74:75:75:77:EOP #WriteExpr($1) <expr-tail> EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("", 0)76:<expr-tail>("", 0)77:<primary>("", 0)78:<primary-tail>("", 0)79:<ident>("", 0)
<------------------------------------


------------------------------------>
79, 80, 80, 81
Token: Id , C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:77:79:79:80:EOP #Copy($1,$$) EOP:75:77:77:79:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:74:75:75:77:EOP #WriteExpr($1) <expr-tail> EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("", 0)76:<expr-tail>("", 0)77:<primary>("", 0)78:<primary-tail>("", 0)79:<ident>("", 0)80:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1

------------------------------------>
75, 77, 78, 79
Token: Comma C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:74:75:75:77:EOP #WriteExpr($1) <expr-tail> EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("", 0)76:<expr-tail>("", 0)77:<primary>("B_1", 0)78:<primary-tail>("B_1", 0)
<------------------------------------


------------------------------------>
78, 79, 79, 80
Token: Comma C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:75:77:78:79:EOP #Copy($2,$$) EOP:74:75:75:77:EOP #WriteExpr($1) <expr-tail> EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("", 0)76:<expr-tail>("", 0)77:<primary>("B_1", 0)78:<primary-tail>("B_1", 0)79:Lambda("", 0)
<------------------------------------

INSTR: (Write,	B_1,	Integer)

------------------------------------>
74, 75, 76, 77
Token: Comma C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
76, 77, 77, 79
Token: Comma C , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)
<------------------------------------


------------------------------------>
76, 77, 78, 79
Token: Id , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)
<------------------------------------


------------------------------------>
78, 79, 79, 81
Token: Id , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("", 0)80:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
79, 81, 81, 83
Token: Id , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:78:79:79:81:EOP #WriteExpr($1) <expr-tail> EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("", 0)80:<expr-tail>("", 0)81:<primary>("", 0)82:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
81, 83, 83, 84
Token: Id , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:79:81:81:83:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:78:79:79:81:EOP #WriteExpr($1) <expr-tail> EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("", 0)80:<expr-tail>("", 0)81:<primary>("", 0)82:<primary-tail>("", 0)83:<ident>("", 0)
<------------------------------------


------------------------------------>
83, 84, 84, 85
Token: Id , D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:81:83:83:84:EOP #Copy($1,$$) EOP:79:81:81:83:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:78:79:79:81:EOP #WriteExpr($1) <expr-tail> EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("", 0)80:<expr-tail>("", 0)81:<primary>("", 0)82:<primary-tail>("", 0)83:<ident>("", 0)84:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1

------------------------------------>
79, 81, 82, 83
Token: Comma D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:78:79:79:81:EOP #WriteExpr($1) <expr-tail> EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("", 0)80:<expr-tail>("", 0)81:<primary>("C_1", 0)82:<primary-tail>("C_1", 0)
<------------------------------------


------------------------------------>
82, 83, 83, 84
Token: Comma D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:79:81:82:83:EOP #Copy($2,$$) EOP:78:79:79:81:EOP #WriteExpr($1) <expr-tail> EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("", 0)80:<expr-tail>("", 0)81:<primary>("C_1", 0)82:<primary-tail>("C_1", 0)83:Lambda("", 0)
<------------------------------------

INSTR: (Write,	C_1,	Integer)

------------------------------------>
78, 79, 80, 81
Token: Comma D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
80, 81, 81, 83
Token: Comma D , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)
<------------------------------------


------------------------------------>
80, 81, 82, 83
Token: Id , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)
<------------------------------------


------------------------------------>
82, 83, 83, 85
Token: Id , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("", 0)84:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
83, 85, 85, 87
Token: Id , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:82:83:83:85:EOP #WriteExpr($1) <expr-tail> EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("", 0)84:<expr-tail>("", 0)85:<primary>("", 0)86:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
85, 87, 87, 88
Token: Id , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:83:85:85:87:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:82:83:83:85:EOP #WriteExpr($1) <expr-tail> EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("", 0)84:<expr-tail>("", 0)85:<primary>("", 0)86:<primary-tail>("", 0)87:<ident>("", 0)
<------------------------------------


------------------------------------>
87, 88, 88, 89
Token: Id , E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:85:87:87:88:EOP #Copy($1,$$) EOP:83:85:85:87:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:82:83:83:85:EOP #WriteExpr($1) <expr-tail> EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("", 0)84:<expr-tail>("", 0)85:<primary>("", 0)86:<primary-tail>("", 0)87:<ident>("", 0)88:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1

------------------------------------>
83, 85, 86, 87
Token: Comma E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:82:83:83:85:EOP #WriteExpr($1) <expr-tail> EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("", 0)84:<expr-tail>("", 0)85:<primary>("D_1", 0)86:<primary-tail>("D_1", 0)
<------------------------------------


------------------------------------>
86, 87, 87, 88
Token: Comma E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:83:85:86:87:EOP #Copy($2,$$) EOP:82:83:83:85:EOP #WriteExpr($1) <expr-tail> EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("", 0)84:<expr-tail>("", 0)85:<primary>("D_1", 0)86:<primary-tail>("D_1", 0)87:Lambda("", 0)
<------------------------------------

INSTR: (Write,	D_1,	Integer)

------------------------------------>
82, 83, 84, 85
Token: Comma E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
84, 85, 85, 87
Token: Comma E , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)
<------------------------------------


------------------------------------>
84, 85, 86, 87
Token: Id , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)
<------------------------------------


------------------------------------>
86, 87, 87, 89
Token: Id , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("", 0)88:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
87, 89, 89, 91
Token: Id , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:86:87:87:89:EOP #WriteExpr($1) <expr-tail> EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("", 0)88:<expr-tail>("", 0)89:<primary>("", 0)90:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
89, 91, 91, 92
Token: Id , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:87:89:89:91:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:86:87:87:89:EOP #WriteExpr($1) <expr-tail> EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("", 0)88:<expr-tail>("", 0)89:<primary>("", 0)90:<primary-tail>("", 0)91:<ident>("", 0)
<------------------------------------


------------------------------------>
91, 92, 92, 93
Token: Id , F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:89:91:91:92:EOP #Copy($1,$$) EOP:87:89:89:91:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:86:87:87:89:EOP #WriteExpr($1) <expr-tail> EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("", 0)88:<expr-tail>("", 0)89:<primary>("", 0)90:<primary-tail>("", 0)91:<ident>("", 0)92:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1

------------------------------------>
87, 89, 90, 91
Token: Comma F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:86:87:87:89:EOP #WriteExpr($1) <expr-tail> EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("", 0)88:<expr-tail>("", 0)89:<primary>("E_1", 0)90:<primary-tail>("E_1", 0)
<------------------------------------


------------------------------------>
90, 91, 91, 92
Token: Comma F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:87:89:90:91:EOP #Copy($2,$$) EOP:86:87:87:89:EOP #WriteExpr($1) <expr-tail> EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("", 0)88:<expr-tail>("", 0)89:<primary>("E_1", 0)90:<primary-tail>("E_1", 0)91:Lambda("", 0)
<------------------------------------

INSTR: (Write,	E_1,	Integer)

------------------------------------>
86, 87, 88, 89
Token: Comma F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
88, 89, 89, 91
Token: Comma F ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)
<------------------------------------


------------------------------------>
88, 89, 90, 91
Token: Id ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)
<------------------------------------


------------------------------------>
90, 91, 91, 93
Token: Id ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("", 0)92:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
91, 93, 93, 95
Token: Id ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:90:91:91:93:EOP #WriteExpr($1) <expr-tail> EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("", 0)92:<expr-tail>("", 0)93:<primary>("", 0)94:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
93, 95, 95, 96
Token: Id ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:91:93:93:95:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:90:91:91:93:EOP #WriteExpr($1) <expr-tail> EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("", 0)92:<expr-tail>("", 0)93:<primary>("", 0)94:<primary-tail>("", 0)95:<ident>("", 0)
<------------------------------------


------------------------------------>
95, 96, 96, 97
Token: Id ) ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:93:95:95:96:EOP #Copy($1,$$) EOP:91:93:93:95:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:90:91:91:93:EOP #WriteExpr($1) <expr-tail> EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("", 0)92:<expr-tail>("", 0)93:<primary>("", 0)94:<primary-tail>("", 0)95:<ident>("", 0)96:Id("F", 0)
<------------------------------------

SymbolTable::finding F in scope: 1

------------------------------------>
91, 93, 94, 95
Token: RParen ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:90:91:91:93:EOP #WriteExpr($1) <expr-tail> EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("", 0)92:<expr-tail>("", 0)93:<primary>("F_1", 0)94:<primary-tail>("F_1", 0)
<------------------------------------


------------------------------------>
94, 95, 95, 96
Token: RParen ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:91:93:94:95:EOP #Copy($2,$$) EOP:90:91:91:93:EOP #WriteExpr($1) <expr-tail> EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("", 0)92:<expr-tail>("", 0)93:<primary>("F_1", 0)94:<primary-tail>("F_1", 0)95:Lambda("", 0)
<------------------------------------

INSTR: (Write,	F_1,	Integer)

------------------------------------>
90, 91, 92, 93
Token: RParen ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("F_1", 0)92:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
92, 93, 93, 94
Token: RParen ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:90:91:92:93:EOP EOP:88:89:90:91:EOP EOP:86:87:88:89:EOP EOP:84:85:86:87:EOP EOP:82:83:84:85:EOP EOP:80:81:82:83:EOP EOP:78:79:80:81:EOP EOP:76:77:78:79:EOP EOP:74:75:76:77:EOP EOP:72:73:74:75:EOP EOP:68:71:72:73:EOP EOP:64:66:68:71:EOP RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen("", 0)70:Semicolon("", 0)71:<expr>("A_1", 0)72:<expr-tail>("", 0)73:Comma(",", 0)74:<expr-list>("", 0)75:<expr>("B_1", 0)76:<expr-tail>("", 0)77:Comma(",", 0)78:<expr-list>("", 0)79:<expr>("C_1", 0)80:<expr-tail>("", 0)81:Comma(",", 0)82:<expr-list>("", 0)83:<expr>("D_1", 0)84:<expr-tail>("", 0)85:Comma(",", 0)86:<expr-list>("", 0)87:<expr>("E_1", 0)88:<expr-tail>("", 0)89:Comma(",", 0)90:<expr-list>("", 0)91:<expr>("F_1", 0)92:<expr-tail>("", 0)93:Lambda("", 0)
<------------------------------------


------------------------------------>
64, 66, 69, 71
Token: RParen ; End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): RParen Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen(")", 0)70:Semicolon("", 0)
<------------------------------------


------------------------------------>
64, 66, 70, 71
Token: Semicolon End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon EOP:63:64:64:66:EOP <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Write("Write", 0)67:LParen("(", 0)68:<expr-list>("", 0)69:RParen(")", 0)70:Semicolon(";", 0)
<------------------------------------


------------------------------------>
63, 64, 65, 66
Token: End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
65, 66, 66, 67
Token: End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:63:64:65:66:EOP EOP:62:63:63:64:EOP EOP:59:61:62:63:EOP EOP:56:58:59:61:EOP End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("", 0)61:<stmt>("", 0)62:<stmt-tail>("", 0)63:<stmt-list>("", 0)64:<stmt>("", 0)65:<stmt-tail>("", 0)66:Lambda("", 0)
<------------------------------------


------------------------------------>
56, 58, 60, 61
Token: End F := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): End #End EOP:55:56:56:58:EOP <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:Begin("Begin", 0)59:<stmt-list>("", 0)60:End("End", 0)
<------------------------------------


------------------------------------>
55, 56, 57, 58
Token: Id := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
57, 58, 58, 59
Token: Id := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
58, 59, 59, 61
Token: Id := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
59, 61, 61, 65
Token: Id := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("", 0)62:AssignOp("", 0)63:<expr>("", 0)64:Semicolon("", 0)
<------------------------------------


------------------------------------>
61, 65, 65, 66
Token: Id := 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:59:61:61:65:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("", 0)62:AssignOp("", 0)63:<expr>("", 0)64:Semicolon("", 0)65:Id("F", 0)
<------------------------------------

SymbolTable::finding F in scope: 1

------------------------------------>
59, 61, 62, 65
Token: AssignOp 1 ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("F_1", 0)62:AssignOp(":=", 0)63:<expr>("", 0)64:Semicolon("", 0)
<------------------------------------


------------------------------------>
59, 61, 63, 65
Token: Int ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("F_1", 0)62:AssignOp(":=", 0)63:<expr>("", 0)64:Semicolon("", 0)
<------------------------------------


------------------------------------>
63, 65, 65, 67
Token: Int ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:59:61:63:65:EOP Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("F_1", 0)62:AssignOp(":=", 0)63:<expr>("", 0)64:Semicolon("", 0)65:<primary>("", 0)66:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
65, 67, 67, 68
Token: Int ; End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:63:65:65:67:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:59:61:63:65:EOP Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("F_1", 0)62:AssignOp(":=", 0)63:<expr>("", 0)64:Semicolon("", 0)65:<primary>("", 0)66:<primary-tail>("", 0)67:Int("1", 0)
<------------------------------------


------------------------------------>
63, 65, 66, 67
Token: Semicolon End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:59:61:63:65:EOP Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("F_1", 0)62:AssignOp(":=", 0)63:<expr>("", 0)64:Semicolon("", 0)65:<primary>("1", 0)66:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
66, 67, 67, 68
Token: Semicolon End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:63:65:66:67:EOP #Copy($2,$$) EOP:59:61:63:65:EOP Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("F_1", 0)62:AssignOp(":=", 0)63:<expr>("", 0)64:Semicolon("", 0)65:<primary>("1", 0)66:<primary-tail>("1", 0)67:Lambda("", 0)
<------------------------------------


------------------------------------>
59, 61, 64, 65
Token: Semicolon End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:58:59:59:61:EOP <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:<ident>("F_1", 0)62:AssignOp(":=", 0)63:<expr>("1", 0)64:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	F_1,	1)

------------------------------------>
58, 59, 60, 61
Token: End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
60, 61, 61, 62
Token: End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:58:59:60:61:EOP EOP:57:58:58:59:EOP EOP:55:56:57:58:EOP EOP:54:55:55:56:EOP EOP:51:53:54:55:EOP EOP:48:50:51:53:EOP End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("", 0)53:<stmt>("", 0)54:<stmt-tail>("", 0)55:<stmt-list>("", 0)56:<scope>("", 0)57:<stmt-tail>("", 0)58:<stmt-list>("", 0)59:<stmt>("", 0)60:<stmt-tail>("", 0)61:Lambda("", 0)
<------------------------------------


------------------------------------>
48, 50, 52, 53
Token: End E := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): End #End EOP:47:48:48:50:EOP <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:Begin("Begin", 0)51:<stmt-list>("", 0)52:End("End", 0)
<------------------------------------


------------------------------------>
47, 48, 49, 50
Token: Id := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
49, 50, 50, 51
Token: Id := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
50, 51, 51, 53
Token: Id := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
51, 53, 53, 57
Token: Id := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("", 0)54:AssignOp("", 0)55:<expr>("", 0)56:Semicolon("", 0)
<------------------------------------


------------------------------------>
53, 57, 57, 58
Token: Id := 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:51:53:53:57:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("", 0)54:AssignOp("", 0)55:<expr>("", 0)56:Semicolon("", 0)57:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1

------------------------------------>
51, 53, 54, 57
Token: AssignOp 1 ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("E_1", 0)54:AssignOp(":=", 0)55:<expr>("", 0)56:Semicolon("", 0)
<------------------------------------


------------------------------------>
51, 53, 55, 57
Token: Int ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("E_1", 0)54:AssignOp(":=", 0)55:<expr>("", 0)56:Semicolon("", 0)
<------------------------------------


------------------------------------>
55, 57, 57, 59
Token: Int ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:51:53:55:57:EOP Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("E_1", 0)54:AssignOp(":=", 0)55:<expr>("", 0)56:Semicolon("", 0)57:<primary>("", 0)58:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
57, 59, 59, 60
Token: Int ; End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:55:57:57:59:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:51:53:55:57:EOP Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("E_1", 0)54:AssignOp(":=", 0)55:<expr>("", 0)56:Semicolon("", 0)57:<primary>("", 0)58:<primary-tail>("", 0)59:Int("1", 0)
<------------------------------------


------------------------------------>
55, 57, 58, 59
Token: Semicolon End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:51:53:55:57:EOP Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("E_1", 0)54:AssignOp(":=", 0)55:<expr>("", 0)56:Semicolon("", 0)57:<primary>("1", 0)58:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
58, 59, 59, 60
Token: Semicolon End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:55:57:58:59:EOP #Copy($2,$$) EOP:51:53:55:57:EOP Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("E_1", 0)54:AssignOp(":=", 0)55:<expr>("", 0)56:Semicolon("", 0)57:<primary>("1", 0)58:<primary-tail>("1", 0)59:Lambda("", 0)
<------------------------------------


------------------------------------>
51, 53, 56, 57
Token: Semicolon End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:50:51:51:53:EOP <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:<ident>("E_1", 0)54:AssignOp(":=", 0)55:<expr>("1", 0)56:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	E_1,	1)

------------------------------------>
50, 51, 52, 53
Token: End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
52, 53, 53, 54
Token: End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:50:51:52:53:EOP EOP:49:50:50:51:EOP EOP:47:48:49:50:EOP EOP:46:47:47:48:EOP EOP:43:45:46:47:EOP EOP:40:42:43:45:EOP End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("", 0)45:<stmt>("", 0)46:<stmt-tail>("", 0)47:<stmt-list>("", 0)48:<scope>("", 0)49:<stmt-tail>("", 0)50:<stmt-list>("", 0)51:<stmt>("", 0)52:<stmt-tail>("", 0)53:Lambda("", 0)
<------------------------------------


------------------------------------>
40, 42, 44, 45
Token: End D := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): End #End EOP:39:40:40:42:EOP <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:Begin("Begin", 0)43:<stmt-list>("", 0)44:End("End", 0)
<------------------------------------


------------------------------------>
39, 40, 41, 42
Token: Id := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
41, 42, 42, 43
Token: Id := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
42, 43, 43, 45
Token: Id := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
43, 45, 45, 49
Token: Id := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("", 0)46:AssignOp("", 0)47:<expr>("", 0)48:Semicolon("", 0)
<------------------------------------


------------------------------------>
45, 49, 49, 50
Token: Id := 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:43:45:45:49:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("", 0)46:AssignOp("", 0)47:<expr>("", 0)48:Semicolon("", 0)49:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1

------------------------------------>
43, 45, 46, 49
Token: AssignOp 1 ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("D_1", 0)46:AssignOp(":=", 0)47:<expr>("", 0)48:Semicolon("", 0)
<------------------------------------


------------------------------------>
43, 45, 47, 49
Token: Int ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("D_1", 0)46:AssignOp(":=", 0)47:<expr>("", 0)48:Semicolon("", 0)
<------------------------------------


------------------------------------>
47, 49, 49, 51
Token: Int ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:43:45:47:49:EOP Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("D_1", 0)46:AssignOp(":=", 0)47:<expr>("", 0)48:Semicolon("", 0)49:<primary>("", 0)50:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
49, 51, 51, 52
Token: Int ; End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:47:49:49:51:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:43:45:47:49:EOP Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("D_1", 0)46:AssignOp(":=", 0)47:<expr>("", 0)48:Semicolon("", 0)49:<primary>("", 0)50:<primary-tail>("", 0)51:Int("1", 0)
<------------------------------------


------------------------------------>
47, 49, 50, 51
Token: Semicolon End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:43:45:47:49:EOP Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("D_1", 0)46:AssignOp(":=", 0)47:<expr>("", 0)48:Semicolon("", 0)49:<primary>("1", 0)50:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
50, 51, 51, 52
Token: Semicolon End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:47:49:50:51:EOP #Copy($2,$$) EOP:43:45:47:49:EOP Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("D_1", 0)46:AssignOp(":=", 0)47:<expr>("", 0)48:Semicolon("", 0)49:<primary>("1", 0)50:<primary-tail>("1", 0)51:Lambda("", 0)
<------------------------------------


------------------------------------>
43, 45, 48, 49
Token: Semicolon End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:42:43:43:45:EOP <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:<ident>("D_1", 0)46:AssignOp(":=", 0)47:<expr>("1", 0)48:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	D_1,	1)

------------------------------------>
42, 43, 44, 45
Token: End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
44, 45, 45, 46
Token: End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:42:43:44:45:EOP EOP:41:42:42:43:EOP EOP:39:40:41:42:EOP EOP:38:39:39:40:EOP EOP:35:37:38:39:EOP EOP:32:34:35:37:EOP End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("", 0)37:<stmt>("", 0)38:<stmt-tail>("", 0)39:<stmt-list>("", 0)40:<scope>("", 0)41:<stmt-tail>("", 0)42:<stmt-list>("", 0)43:<stmt>("", 0)44:<stmt-tail>("", 0)45:Lambda("", 0)
<------------------------------------


------------------------------------>
32, 34, 36, 37
Token: End C := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): End #End EOP:31:32:32:34:EOP <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:Begin("Begin", 0)35:<stmt-list>("", 0)36:End("End", 0)
<------------------------------------


------------------------------------>
31, 32, 33, 34
Token: Id := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
33, 34, 34, 35
Token: Id := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
34, 35, 35, 37
Token: Id := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
35, 37, 37, 41
Token: Id := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("", 0)38:AssignOp("", 0)39:<expr>("", 0)40:Semicolon("", 0)
<------------------------------------


------------------------------------>
37, 41, 41, 42
Token: Id := 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:35:37:37:41:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("", 0)38:AssignOp("", 0)39:<expr>("", 0)40:Semicolon("", 0)41:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1

------------------------------------>
35, 37, 38, 41
Token: AssignOp 1 ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("C_1", 0)38:AssignOp(":=", 0)39:<expr>("", 0)40:Semicolon("", 0)
<------------------------------------


------------------------------------>
35, 37, 39, 41
Token: Int ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("C_1", 0)38:AssignOp(":=", 0)39:<expr>("", 0)40:Semicolon("", 0)
<------------------------------------


------------------------------------>
39, 41, 41, 43
Token: Int ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:35:37:39:41:EOP Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("C_1", 0)38:AssignOp(":=", 0)39:<expr>("", 0)40:Semicolon("", 0)41:<primary>("", 0)42:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
41, 43, 43, 44
Token: Int ; End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:39:41:41:43:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:35:37:39:41:EOP Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("C_1", 0)38:AssignOp(":=", 0)39:<expr>("", 0)40:Semicolon("", 0)41:<primary>("", 0)42:<primary-tail>("", 0)43:Int("1", 0)
<------------------------------------


------------------------------------>
39, 41, 42, 43
Token: Semicolon End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:35:37:39:41:EOP Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("C_1", 0)38:AssignOp(":=", 0)39:<expr>("", 0)40:Semicolon("", 0)41:<primary>("1", 0)42:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
42, 43, 43, 44
Token: Semicolon End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:39:41:42:43:EOP #Copy($2,$$) EOP:35:37:39:41:EOP Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("C_1", 0)38:AssignOp(":=", 0)39:<expr>("", 0)40:Semicolon("", 0)41:<primary>("1", 0)42:<primary-tail>("1", 0)43:Lambda("", 0)
<------------------------------------


------------------------------------>
35, 37, 40, 41
Token: Semicolon End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:34:35:35:37:EOP <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:<ident>("C_1", 0)38:AssignOp(":=", 0)39:<expr>("1", 0)40:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	C_1,	1)

------------------------------------>
34, 35, 36, 37
Token: End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
36, 37, 37, 38
Token: End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:34:35:36:37:EOP EOP:33:34:34:35:EOP EOP:31:32:33:34:EOP EOP:30:31:31:32:EOP EOP:27:29:30:31:EOP EOP:24:26:27:29:EOP End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("", 0)29:<stmt>("", 0)30:<stmt-tail>("", 0)31:<stmt-list>("", 0)32:<scope>("", 0)33:<stmt-tail>("", 0)34:<stmt-list>("", 0)35:<stmt>("", 0)36:<stmt-tail>("", 0)37:Lambda("", 0)
<------------------------------------


------------------------------------>
24, 26, 28, 29
Token: End B := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): End #End EOP:23:24:24:26:EOP <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:Begin("Begin", 0)27:<stmt-list>("", 0)28:End("End", 0)
<------------------------------------


------------------------------------>
23, 24, 25, 26
Token: Id := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
25, 26, 26, 27
Token: Id := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
26, 27, 27, 29
Token: Id := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
27, 29, 29, 33
Token: Id := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("", 0)30:AssignOp("", 0)31:<expr>("", 0)32:Semicolon("", 0)
<------------------------------------


------------------------------------>
29, 33, 33, 34
Token: Id := 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:27:29:29:33:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("", 0)30:AssignOp("", 0)31:<expr>("", 0)32:Semicolon("", 0)33:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1

------------------------------------>
27, 29, 30, 33
Token: AssignOp 1 ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("B_1", 0)30:AssignOp(":=", 0)31:<expr>("", 0)32:Semicolon("", 0)
<------------------------------------


------------------------------------>
27, 29, 31, 33
Token: Int ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("B_1", 0)30:AssignOp(":=", 0)31:<expr>("", 0)32:Semicolon("", 0)
<------------------------------------


------------------------------------>
31, 33, 33, 35
Token: Int ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:27:29:31:33:EOP Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("B_1", 0)30:AssignOp(":=", 0)31:<expr>("", 0)32:Semicolon("", 0)33:<primary>("", 0)34:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
33, 35, 35, 36
Token: Int ; A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:31:33:33:35:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:27:29:31:33:EOP Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("B_1", 0)30:AssignOp(":=", 0)31:<expr>("", 0)32:Semicolon("", 0)33:<primary>("", 0)34:<primary-tail>("", 0)35:Int("1", 0)
<------------------------------------


------------------------------------>
31, 33, 34, 35
Token: Semicolon A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:27:29:31:33:EOP Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("B_1", 0)30:AssignOp(":=", 0)31:<expr>("", 0)32:Semicolon("", 0)33:<primary>("1", 0)34:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
34, 35, 35, 36
Token: Semicolon A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:31:33:34:35:EOP #Copy($2,$$) EOP:27:29:31:33:EOP Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("B_1", 0)30:AssignOp(":=", 0)31:<expr>("", 0)32:Semicolon("", 0)33:<primary>("1", 0)34:<primary-tail>("1", 0)35:Lambda("", 0)
<------------------------------------


------------------------------------>
27, 29, 32, 33
Token: Semicolon A := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:26:27:27:29:EOP <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<ident>("B_1", 0)30:AssignOp(":=", 0)31:<expr>("1", 0)32:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	B_1,	1)

------------------------------------>
26, 27, 28, 29
Token: Id := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
28, 29, 29, 30
Token: Id := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
29, 30, 30, 32
Token: Id := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
30, 32, 32, 36
Token: Id := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("", 0)33:AssignOp("", 0)34:<expr>("", 0)35:Semicolon("", 0)
<------------------------------------


------------------------------------>
32, 36, 36, 37
Token: Id := 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:30:32:32:36:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("", 0)33:AssignOp("", 0)34:<expr>("", 0)35:Semicolon("", 0)36:Id("A", 0)
<------------------------------------

SymbolTable::finding A in scope: 1

------------------------------------>
30, 32, 33, 36
Token: AssignOp 1 ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): AssignOp <expr> Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_1", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)
<------------------------------------


------------------------------------>
30, 32, 34, 36
Token: Int ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_1", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)
<------------------------------------


------------------------------------>
34, 36, 36, 38
Token: Int ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_1", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("", 0)37:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
36, 38, 38, 39
Token: Int ; Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Int #ProcessLiteral($$) EOP:34:36:36:38:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_1", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("", 0)37:<primary-tail>("", 0)38:Int("1", 0)
<------------------------------------


------------------------------------>
34, 36, 37, 38
Token: Semicolon Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_1", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("1", 0)37:<primary-tail>("1", 0)
<------------------------------------


------------------------------------>
37, 38, 38, 39
Token: Semicolon Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:34:36:37:38:EOP #Copy($2,$$) EOP:30:32:34:36:EOP Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_1", 0)33:AssignOp(":=", 0)34:<expr>("", 0)35:Semicolon("", 0)36:<primary>("1", 0)37:<primary-tail>("1", 0)38:Lambda("", 0)
<------------------------------------


------------------------------------>
30, 32, 35, 36
Token: Semicolon Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Semicolon #Assign($1,$3) EOP:29:30:30:32:EOP <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<ident>("A_1", 0)33:AssignOp(":=", 0)34:<expr>("1", 0)35:Semicolon(";", 0)
<------------------------------------

INSTR: (Store,	A_1,	1)

------------------------------------>
29, 30, 31, 32
Token: Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-tail> EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
31, 32, 32, 33
Token: Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt-list> EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)
<------------------------------------


------------------------------------>
32, 33, 33, 35
Token: Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): <stmt> <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
33, 35, 35, 40
Token: Write ( A , B , C , D , E , F ) ; End Eof 
Parse (l-r): Write LParen <expr-list> RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)
<------------------------------------


------------------------------------>
33, 35, 36, 40
Token: LParen A , B , C , D , E , F ) ; End Eof 
Parse (l-r): LParen <expr-list> RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)
<------------------------------------


------------------------------------>
33, 35, 37, 40
Token: Id , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)
<------------------------------------


------------------------------------>
37, 40, 40, 42
Token: Id , B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("", 0)41:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
40, 42, 42, 44
Token: Id , B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:37:40:40:42:EOP #WriteExpr($1) <expr-tail> EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("", 0)41:<expr-tail>("", 0)42:<primary>("", 0)43:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
42, 44, 44, 45
Token: Id , B , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:40:42:42:44:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:37:40:40:42:EOP #WriteExpr($1) <expr-tail> EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("", 0)41:<expr-tail>("", 0)42:<primary>("", 0)43:<primary-tail>("", 0)44:<ident>("", 0)
<------------------------------------


------------------------------------>
44, 45, 45, 46
Token: Id , B , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:42:44:44:45:EOP #Copy($1,$$) EOP:40:42:42:44:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:37:40:40:42:EOP #WriteExpr($1) <expr-tail> EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("", 0)41:<expr-tail>("", 0)42:<primary>("", 0)43:<primary-tail>("", 0)44:<ident>("", 0)45:Id("A", 0)
<------------------------------------

SymbolTable::finding A in scope: 1

------------------------------------>
40, 42, 43, 44
Token: Comma B , C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:37:40:40:42:EOP #WriteExpr($1) <expr-tail> EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("", 0)41:<expr-tail>("", 0)42:<primary>("A_1", 0)43:<primary-tail>("A_1", 0)
<------------------------------------


------------------------------------>
43, 44, 44, 45
Token: Comma B , C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:40:42:43:44:EOP #Copy($2,$$) EOP:37:40:40:42:EOP #WriteExpr($1) <expr-tail> EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("", 0)41:<expr-tail>("", 0)42:<primary>("A_1", 0)43:<primary-tail>("A_1", 0)44:Lambda("", 0)
<------------------------------------

INSTR: (Write,	A_1,	Integer)

------------------------------------>
37, 40, 41, 42
Token: Comma B , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
41, 42, 42, 44
Token: Comma B , C , D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)
<------------------------------------


------------------------------------>
41, 42, 43, 44
Token: Id , C , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)
<------------------------------------


------------------------------------>
43, 44, 44, 46
Token: Id , C , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("", 0)45:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
44, 46, 46, 48
Token: Id , C , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:43:44:44:46:EOP #WriteExpr($1) <expr-tail> EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("", 0)45:<expr-tail>("", 0)46:<primary>("", 0)47:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
46, 48, 48, 49
Token: Id , C , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:44:46:46:48:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:43:44:44:46:EOP #WriteExpr($1) <expr-tail> EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("", 0)45:<expr-tail>("", 0)46:<primary>("", 0)47:<primary-tail>("", 0)48:<ident>("", 0)
<------------------------------------


------------------------------------>
48, 49, 49, 50
Token: Id , C , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:46:48:48:49:EOP #Copy($1,$$) EOP:44:46:46:48:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:43:44:44:46:EOP #WriteExpr($1) <expr-tail> EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("", 0)45:<expr-tail>("", 0)46:<primary>("", 0)47:<primary-tail>("", 0)48:<ident>("", 0)49:Id("B", 0)
<------------------------------------

SymbolTable::finding B in scope: 1

------------------------------------>
44, 46, 47, 48
Token: Comma C , D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:43:44:44:46:EOP #WriteExpr($1) <expr-tail> EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("", 0)45:<expr-tail>("", 0)46:<primary>("B_1", 0)47:<primary-tail>("B_1", 0)
<------------------------------------


------------------------------------>
47, 48, 48, 49
Token: Comma C , D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:44:46:47:48:EOP #Copy($2,$$) EOP:43:44:44:46:EOP #WriteExpr($1) <expr-tail> EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("", 0)45:<expr-tail>("", 0)46:<primary>("B_1", 0)47:<primary-tail>("B_1", 0)48:Lambda("", 0)
<------------------------------------

INSTR: (Write,	B_1,	Integer)

------------------------------------>
43, 44, 45, 46
Token: Comma C , D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
45, 46, 46, 48
Token: Comma C , D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)
<------------------------------------


------------------------------------>
45, 46, 47, 48
Token: Id , D , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)
<------------------------------------


------------------------------------>
47, 48, 48, 50
Token: Id , D , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("", 0)49:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
48, 50, 50, 52
Token: Id , D , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:47:48:48:50:EOP #WriteExpr($1) <expr-tail> EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("", 0)49:<expr-tail>("", 0)50:<primary>("", 0)51:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
50, 52, 52, 53
Token: Id , D , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:48:50:50:52:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:47:48:48:50:EOP #WriteExpr($1) <expr-tail> EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("", 0)49:<expr-tail>("", 0)50:<primary>("", 0)51:<primary-tail>("", 0)52:<ident>("", 0)
<------------------------------------


------------------------------------>
52, 53, 53, 54
Token: Id , D , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:50:52:52:53:EOP #Copy($1,$$) EOP:48:50:50:52:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:47:48:48:50:EOP #WriteExpr($1) <expr-tail> EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("", 0)49:<expr-tail>("", 0)50:<primary>("", 0)51:<primary-tail>("", 0)52:<ident>("", 0)53:Id("C", 0)
<------------------------------------

SymbolTable::finding C in scope: 1

------------------------------------>
48, 50, 51, 52
Token: Comma D , E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:47:48:48:50:EOP #WriteExpr($1) <expr-tail> EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("", 0)49:<expr-tail>("", 0)50:<primary>("C_1", 0)51:<primary-tail>("C_1", 0)
<------------------------------------


------------------------------------>
51, 52, 52, 53
Token: Comma D , E , F ) ; End Eof 
Parse (l-r): Lambda EOP:48:50:51:52:EOP #Copy($2,$$) EOP:47:48:48:50:EOP #WriteExpr($1) <expr-tail> EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("", 0)49:<expr-tail>("", 0)50:<primary>("C_1", 0)51:<primary-tail>("C_1", 0)52:Lambda("", 0)
<------------------------------------

INSTR: (Write,	C_1,	Integer)

------------------------------------>
47, 48, 49, 50
Token: Comma D , E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
49, 50, 50, 52
Token: Comma D , E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)
<------------------------------------


------------------------------------>
49, 50, 51, 52
Token: Id , E , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)
<------------------------------------


------------------------------------>
51, 52, 52, 54
Token: Id , E , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("", 0)53:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
52, 54, 54, 56
Token: Id , E , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:51:52:52:54:EOP #WriteExpr($1) <expr-tail> EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("", 0)53:<expr-tail>("", 0)54:<primary>("", 0)55:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
54, 56, 56, 57
Token: Id , E , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:52:54:54:56:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:51:52:52:54:EOP #WriteExpr($1) <expr-tail> EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("", 0)53:<expr-tail>("", 0)54:<primary>("", 0)55:<primary-tail>("", 0)56:<ident>("", 0)
<------------------------------------


------------------------------------>
56, 57, 57, 58
Token: Id , E , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:54:56:56:57:EOP #Copy($1,$$) EOP:52:54:54:56:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:51:52:52:54:EOP #WriteExpr($1) <expr-tail> EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("", 0)53:<expr-tail>("", 0)54:<primary>("", 0)55:<primary-tail>("", 0)56:<ident>("", 0)57:Id("D", 0)
<------------------------------------

SymbolTable::finding D in scope: 1

------------------------------------>
52, 54, 55, 56
Token: Comma E , F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:51:52:52:54:EOP #WriteExpr($1) <expr-tail> EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("", 0)53:<expr-tail>("", 0)54:<primary>("D_1", 0)55:<primary-tail>("D_1", 0)
<------------------------------------


------------------------------------>
55, 56, 56, 57
Token: Comma E , F ) ; End Eof 
Parse (l-r): Lambda EOP:52:54:55:56:EOP #Copy($2,$$) EOP:51:52:52:54:EOP #WriteExpr($1) <expr-tail> EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("", 0)53:<expr-tail>("", 0)54:<primary>("D_1", 0)55:<primary-tail>("D_1", 0)56:Lambda("", 0)
<------------------------------------

INSTR: (Write,	D_1,	Integer)

------------------------------------>
51, 52, 53, 54
Token: Comma E , F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
53, 54, 54, 56
Token: Comma E , F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)
<------------------------------------


------------------------------------>
53, 54, 55, 56
Token: Id , F ) ; End Eof 
Parse (l-r): <expr-list> EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)
<------------------------------------


------------------------------------>
55, 56, 56, 58
Token: Id , F ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("", 0)57:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
56, 58, 58, 60
Token: Id , F ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:55:56:56:58:EOP #WriteExpr($1) <expr-tail> EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("", 0)57:<expr-tail>("", 0)58:<primary>("", 0)59:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
58, 60, 60, 61
Token: Id , F ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:56:58:58:60:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:55:56:56:58:EOP #WriteExpr($1) <expr-tail> EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("", 0)57:<expr-tail>("", 0)58:<primary>("", 0)59:<primary-tail>("", 0)60:<ident>("", 0)
<------------------------------------


------------------------------------>
60, 61, 61, 62
Token: Id , F ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:58:60:60:61:EOP #Copy($1,$$) EOP:56:58:58:60:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:55:56:56:58:EOP #WriteExpr($1) <expr-tail> EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("", 0)57:<expr-tail>("", 0)58:<primary>("", 0)59:<primary-tail>("", 0)60:<ident>("", 0)61:Id("E", 0)
<------------------------------------

SymbolTable::finding E in scope: 1

------------------------------------>
56, 58, 59, 60
Token: Comma F ) ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:55:56:56:58:EOP #WriteExpr($1) <expr-tail> EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("", 0)57:<expr-tail>("", 0)58:<primary>("E_1", 0)59:<primary-tail>("E_1", 0)
<------------------------------------


------------------------------------>
59, 60, 60, 61
Token: Comma F ) ; End Eof 
Parse (l-r): Lambda EOP:56:58:59:60:EOP #Copy($2,$$) EOP:55:56:56:58:EOP #WriteExpr($1) <expr-tail> EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("", 0)57:<expr-tail>("", 0)58:<primary>("E_1", 0)59:<primary-tail>("E_1", 0)60:Lambda("", 0)
<------------------------------------

INSTR: (Write,	E_1,	Integer)

------------------------------------>
55, 56, 57, 58
Token: Comma F ) ; End Eof 
Parse (l-r): <expr-tail> EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
57, 58, 58, 60
Token: Comma F ) ; End Eof 
Parse (l-r): Comma <expr-list> EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)
<------------------------------------


------------------------------------>
57, 58, 59, 60
Token: Id ) ; End Eof 
Parse (l-r): <expr-list> EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)
<------------------------------------


------------------------------------>
59, 60, 60, 62
Token: Id ) ; End Eof 
Parse (l-r): <expr> #WriteExpr($1) <expr-tail> EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("", 0)61:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
60, 62, 62, 64
Token: Id ) ; End Eof 
Parse (l-r): <primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:59:60:60:62:EOP #WriteExpr($1) <expr-tail> EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("", 0)61:<expr-tail>("", 0)62:<primary>("", 0)63:<primary-tail>("", 0)
<------------------------------------


------------------------------------>
62, 64, 64, 65
Token: Id ) ; End Eof 
Parse (l-r): <ident> #Copy($1,$$) EOP:60:62:62:64:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:59:60:60:62:EOP #WriteExpr($1) <expr-tail> EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("", 0)61:<expr-tail>("", 0)62:<primary>("", 0)63:<primary-tail>("", 0)64:<ident>("", 0)
<------------------------------------


------------------------------------>
64, 65, 65, 66
Token: Id ) ; End Eof 
Parse (l-r): Id #ProcessId($$) EOP:62:64:64:65:EOP #Copy($1,$$) EOP:60:62:62:64:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:59:60:60:62:EOP #WriteExpr($1) <expr-tail> EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("", 0)61:<expr-tail>("", 0)62:<primary>("", 0)63:<primary-tail>("", 0)64:<ident>("", 0)65:Id("F", 0)
<------------------------------------

SymbolTable::finding F in scope: 1

------------------------------------>
60, 62, 63, 64
Token: RParen ; End Eof 
Parse (l-r): <primary-tail> #Copy($2,$$) EOP:59:60:60:62:EOP #WriteExpr($1) <expr-tail> EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("", 0)61:<expr-tail>("", 0)62:<primary>("F_1", 0)63:<primary-tail>("F_1", 0)
<------------------------------------


------------------------------------>
63, 64, 64, 65
Token: RParen ; End Eof 
Parse (l-r): Lambda EOP:60:62:63:64:EOP #Copy($2,$$) EOP:59:60:60:62:EOP #WriteExpr($1) <expr-tail> EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("", 0)61:<expr-tail>("", 0)62:<primary>("F_1", 0)63:<primary-tail>("F_1", 0)64:Lambda("", 0)
<------------------------------------

INSTR: (Write,	F_1,	Integer)

------------------------------------>
59, 60, 61, 62
Token: RParen ; End Eof 
Parse (l-r): <expr-tail> EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("F_1", 0)61:<expr-tail>("", 0)
<------------------------------------


------------------------------------>
61, 62, 62, 63
Token: RParen ; End Eof 
Parse (l-r): Lambda EOP:59:60:61:62:EOP EOP:57:58:59:60:EOP EOP:55:56:57:58:EOP EOP:53:54:55:56:EOP EOP:51:52:53:54:EOP EOP:49:50:51:52:EOP EOP:47:48:49:50:EOP EOP:45:46:47:48:EOP EOP:43:44:45:46:EOP EOP:41:42:43:44:EOP EOP:37:40:41:42:EOP EOP:33:35:37:40:EOP RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen("", 0)39:Semicolon("", 0)40:<expr>("A_1", 0)41:<expr-tail>("", 0)42:Comma(",", 0)43:<expr-list>("", 0)44:<expr>("B_1", 0)45:<expr-tail>("", 0)46:Comma(",", 0)47:<expr-list>("", 0)48:<expr>("C_1", 0)49:<expr-tail>("", 0)50:Comma(",", 0)51:<expr-list>("", 0)52:<expr>("D_1", 0)53:<expr-tail>("", 0)54:Comma(",", 0)55:<expr-list>("", 0)56:<expr>("E_1", 0)57:<expr-tail>("", 0)58:Comma(",", 0)59:<expr-list>("", 0)60:<expr>("F_1", 0)61:<expr-tail>("", 0)62:Lambda("", 0)
<------------------------------------


------------------------------------>
33, 35, 38, 40
Token: RParen ; End Eof 
Parse (l-r): RParen Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen(")", 0)39:Semicolon("", 0)
<------------------------------------


------------------------------------>
33, 35, 39, 40
Token: Semicolon End Eof 
Parse (l-r): Semicolon EOP:32:33:33:35:EOP <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Write("Write", 0)36:LParen("(", 0)37:<expr-list>("", 0)38:RParen(")", 0)39:Semicolon(";", 0)
<------------------------------------


------------------------------------>
32, 33, 34, 35
Token: End Eof 
Parse (l-r): <stmt-tail> EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)
<------------------------------------


------------------------------------>
34, 35, 35, 36
Token: End Eof 
Parse (l-r): Lambda EOP:32:33:34:35:EOP EOP:31:32:32:33:EOP EOP:29:30:31:32:EOP EOP:28:29:29:30:EOP EOP:26:27:28:29:EOP EOP:25:26:26:27:EOP EOP:23:24:25:26:EOP EOP:22:23:23:24:EOP EOP:20:21:22:23:EOP EOP:19:20:20:21:EOP EOP:17:18:19:20:EOP EOP:16:17:17:18:EOP EOP:14:15:16:17:EOP EOP:13:14:14:15:EOP EOP:11:12:13:14:EOP EOP:10:11:11:12:EOP EOP:8:9:10:11:EOP EOP:7:8:8:9:EOP EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<stmt-list>("", 0)9:<stmt>("", 0)10:<stmt-tail>("", 0)11:<stmt-list>("", 0)12:<stmt>("", 0)13:<stmt-tail>("", 0)14:<stmt-list>("", 0)15:<stmt>("", 0)16:<stmt-tail>("", 0)17:<stmt-list>("", 0)18:<stmt>("", 0)19:<stmt-tail>("", 0)20:<stmt-list>("", 0)21:<stmt>("", 0)22:<stmt-tail>("", 0)23:<stmt-list>("", 0)24:<scope>("", 0)25:<stmt-tail>("", 0)26:<stmt-list>("", 0)27:<stmt>("", 0)28:<stmt-tail>("", 0)29:<stmt-list>("", 0)30:<stmt>("", 0)31:<stmt-tail>("", 0)32:<stmt-list>("", 0)33:<stmt>("", 0)34:<stmt-tail>("", 0)35:Lambda("", 0)
<------------------------------------


------------------------------------>
1, 3, 5, 6
Token: End Eof 
Parse (l-r): End #End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
Semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("End", 0)
<------------------------------------

INSTR: (Halt)
