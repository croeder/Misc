nonterminal: <system-goal>

------------------------------------
-1, -1, 0, 1
1
token:Begin A := 5 ; End Eof 
parse (l-r):<system-goal> 
semantic (r-l): 0:<system-goal>("", 0)
------------------------------------


<program> Eof   m is: 2
nonterminal: <program>

------------------------------------
0, 1, 1, 3
3
token:Begin A := 5 ; End Eof 
parse (l-r):<program> Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)
------------------------------------


Begin <stmt-list> End   m is: 3
action: #Start
X is a TERMINAL
match:Begin
DID update stack position: 3 with Begin Begin

------------------------------------
1, 3, 3, 6
6
token:Begin A := 5 ; End Eof 
parse (l-r):Begin <stmt-list> End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)
------------------------------------

nonterminal: <stmt-list>

------------------------------------
1, 3, 4, 6
6
token:Id := 5 ; End Eof 
parse (l-r):<stmt-list> End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)
------------------------------------


<stmt> <stmt-tail>   m is: 2
nonterminal: <stmt>

------------------------------------
4, 6, 6, 8
8
token:Id := 5 ; End Eof 
parse (l-r):<stmt> <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)
------------------------------------


<ident> AssignOp <expr> Semicolon   m is: 4
nonterminal: <ident>

------------------------------------
6, 8, 8, 12
12
token:Id := 5 ; End Eof 
parse (l-r):<ident> AssignOp <expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp("", 0)10:<expr>("", 0)11:Semicolon("", 0)
------------------------------------


Id   m is: 1
X is a TERMINAL
match:Id
DID update stack position: 12 with Id A

------------------------------------
8, 12, 12, 13
13
token:Id := 5 ; End Eof 
parse (l-r):Id #ProcessId($$) EOP:6:8:8:12:EOP AssignOp <expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp("", 0)10:<expr>("", 0)11:Semicolon("", 0)12:Id("A", 0)
------------------------------------

action: #ProcessId($$)
POPPING EOP before: l:8 r:12 c:13 t:13 s. size:13
POPPING EOP after: l:6 r:8 c:8 t:12 s. size:13
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp("", 0)10:<expr>("", 0)11:Semicolon("", 0)
X is a TERMINAL
match:AssignOp
DID update stack position: 9 with AssignOp :=

------------------------------------
6, 8, 9, 12
12
token:AssignOp 5 ; End Eof 
parse (l-r):AssignOp <expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)
------------------------------------

nonterminal: <expr>

------------------------------------
6, 8, 10, 12
12
token:Int ; End Eof 
parse (l-r):<expr> Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)
------------------------------------


<primary> <primary-tail>   m is: 2
nonterminal: <primary>

------------------------------------
10, 12, 12, 14
14
token:Int ; End Eof 
parse (l-r):<primary> #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)
------------------------------------


Int   m is: 1
X is a TERMINAL
match:Int
DID update stack position: 14 with Int 5

------------------------------------
12, 14, 14, 15
15
token:Int ; End Eof 
parse (l-r):Int #ProcessLiteral($$) EOP:10:12:12:14:EOP #Copy($1,$2) <primary-tail> #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)14:Int("5", 0)
------------------------------------

action: #ProcessLiteral($$)
POPPING EOP before: l:12 r:14 c:15 t:15 s. size:15
POPPING EOP after: l:10 r:12 c:12 t:14 s. size:15
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)
action: #Copy($1,$2)
nonterminal: <primary-tail>

------------------------------------
10, 12, 13, 14
14
token:Semicolon End Eof 
parse (l-r):<primary-tail> #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)
------------------------------------


Lambda   m is: 1
X is a TERMINAL
match:Lambda

------------------------------------
13, 14, 14, 15
15
token:Semicolon End Eof 
parse (l-r):Lambda EOP:10:12:13:14:EOP #Copy($2,$$) EOP:6:8:10:12:EOP Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)14:Lambda("", 0)
------------------------------------

POPPING EOP before: l:13 r:14 c:14 t:15 s. size:15
POPPING EOP after: l:10 r:12 c:13 t:14 s. size:15
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)12:<primary>("", 0)13:<primary-tail>("", 0)
action: #Copy($2,$$)
POPPING EOP before: l:10 r:12 c:14 t:14 s. size:14
POPPING EOP after: l:6 r:8 c:10 t:12 s. size:14
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon("", 0)
X is a TERMINAL
match:Semicolon
DID update stack position: 11 with Semicolon ;

------------------------------------
6, 8, 11, 12
12
token:Semicolon End Eof 
parse (l-r):Semicolon #Assign($1,$3) EOP:4:6:6:8:EOP <stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:<ident>("", 0)9:AssignOp(":=", 0)10:<expr>("", 0)11:Semicolon(";", 0)
------------------------------------

action: #Assign($1,$3)
POPPING EOP before: l:6 r:8 c:12 t:12 s. size:12
POPPING EOP after: l:4 r:6 c:6 t:8 s. size:12
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)
nonterminal: <stmt-tail>

------------------------------------
4, 6, 7, 8
8
token:End Eof 
parse (l-r):<stmt-tail> EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)
------------------------------------


Lambda   m is: 1
X is a TERMINAL
match:Lambda

------------------------------------
7, 8, 8, 9
9
token:End Eof 
parse (l-r):Lambda EOP:4:6:7:8:EOP EOP:1:3:4:6:EOP End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)8:Lambda("", 0)
------------------------------------

POPPING EOP before: l:7 r:8 c:8 t:9 s. size:9
POPPING EOP after: l:4 r:6 c:7 t:8 s. size:9
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)6:<stmt>("", 0)7:<stmt-tail>("", 0)
POPPING EOP before: l:4 r:6 c:8 t:8 s. size:8
POPPING EOP after: l:1 r:3 c:4 t:6 s. size:8
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("", 0)
X is a TERMINAL
match:End
DID update stack position: 5 with End End

------------------------------------
1, 3, 5, 6
6
token:End Eof 
parse (l-r):End EOP:0:1:1:3:EOP Eof #Finish EOP:-1:-1:0:1:EOP 
semantic (r-l): 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)3:Begin("Begin", 0)4:<stmt-list>("", 0)5:End("End", 0)
------------------------------------

POPPING EOP before: l:1 r:3 c:6 t:6 s. size:6
POPPING EOP after: l:0 r:1 c:1 t:3 s. size:6
TRIMMING: 
semantic: 0:<system-goal>("", 0)1:<program>("", 0)2:Eof("", 0)
X is a TERMINAL
match:Eof